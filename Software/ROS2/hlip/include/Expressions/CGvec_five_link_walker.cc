/*
 * Automatically Generated from Mathematica.
 * Sun 9 Jun 2024 16:09:28 GMT-05:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

#include "mdefs.hpp"
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t1561;
  double t1527;
  double t1612;
  double t1628;
  double t1622;
  double t1637;
  double t1642;
  double t1654;
  double t1665;
  double t1670;
  double t1689;
  double t1691;
  double t1692;
  double t1711;
  double t1683;
  double t1684;
  double t1686;
  double t1738;
  double t1739;
  double t1740;
  double t1741;
  double t1688;
  double t1693;
  double t1699;
  double t1722;
  double t1724;
  double t1744;
  double t1745;
  double t1748;
  double t1758;
  double t1759;
  double t1768;
  double t1769;
  double t1770;
  double t1771;
  double t1760;
  double t1761;
  double t1762;
  double t1763;
  double t1643;
  double t1674;
  double t1675;
  double t1681;
  double t1708;
  double t1715;
  double t1729;
  double t1734;
  double t1742;
  double t1766;
  double t1773;
  double t1774;
  double t1776;
  double t1777;
  double t1779;
  double t1792;
  double t1793;
  double t1794;
  double t1789;
  double t1790;
  double t1775;
  double t1780;
  double t1781;
  double t1782;
  double t1788;
  double t1791;
  double t1795;
  double t1796;
  double t1797;
  double t1798;
  double t1799;
  double t1800;
  double t1801;
  double t1802;
  double t1803;
  double t1804;
  double t1805;
  double t1814;
  double t1816;
  double t1822;
  double t1823;
  double t1824;
  double t1838;
  double t1839;
  double t1815;
  double t1819;
  double t1820;
  double t1821;
  double t1825;
  double t1826;
  double t1846;
  double t1847;
  double t1848;
  double t1849;
  double t1840;
  double t1841;
  double t1842;
  double t1843;
  double t1828;
  double t1829;
  double t1830;
  double t1831;
  double t1832;
  double t1833;
  double t1861;
  double t1862;
  double t1864;
  double t1865;
  double t1866;
  double t1888;
  double t1889;
  double t1890;
  double t1891;
  double t1883;
  double t1884;
  double t1885;
  double t1886;
  double t1827;
  double t1834;
  double t1835;
  double t1904;
  double t1905;
  double t1906;
  double t1907;
  double t1908;
  double t1909;
  double t1910;
  double t1911;
  double t1912;
  double t1837;
  double t1844;
  double t1845;
  double t1850;
  double t1851;
  double t1852;
  double t1853;
  double t1854;
  double t1855;
  double t1856;
  double t1857;
  double t1858;
  double t1859;
  double t1918;
  double t1925;
  double t1926;
  double t1927;
  double t1922;
  double t1923;
  double t1919;
  double t1863;
  double t1867;
  double t1868;
  double t1944;
  double t1945;
  double t1946;
  double t1870;
  double t1871;
  double t1872;
  double t1873;
  double t1874;
  double t1875;
  double t1876;
  double t1877;
  double t1878;
  double t1879;
  double t1880;
  double t1881;
  double t1952;
  double t1953;
  double t1954;
  double t1955;
  double t1956;
  double t1957;
  double t1958;
  double t1914;
  double t1920;
  double t1921;
  double t1895;
  double t1896;
  double t1897;
  double t1887;
  double t1892;
  double t1893;
  double t1969;
  double t1970;
  double t1971;
  double t1972;
  double t1973;
  double t1966;
  double t1967;
  double t1924;
  double t1928;
  double t1929;
  double t1930;
  double t1931;
  double t1932;
  double t1933;
  double t1934;
  double t1935;
  double t1936;
  double t1937;
  double t1938;
  double t1939;
  double t1963;
  double t1964;
  double t1978;
  double t1965;
  double t1975;
  double t1979;
  double t1981;
  double t1995;
  double t1996;
  double t1997;
  double t1991;
  double t1992;
  double t1993;
  double t1983;
  double t1894;
  double t1898;
  double t1899;
  double t1900;
  double t1968;
  double t1974;
  double t1976;
  double t1977;
  double t1980;
  double t1982;
  double t1984;
  double t1985;
  double t1986;
  double t1994;
  double t1998;
  double t1999;
  double t2000;
  double t2001;
  double t2002;
  double t2003;
  double t2004;
  double t2005;
  double t2013;
  double t2015;
  double t2014;
  double t2016;
  double t2017;
  double t2018;
  double t2019;
  double t2020;
  double t2021;
  double t2022;
  double t2023;
  double t2028;
  double t2029;
  double t2030;
  double t2031;
  double t2032;
  double t2033;
  double t2038;
  double t2039;
  double t2040;
  double t2041;
  double t2042;
  double t2043;
  double t2044;
  double t2045;
  double t2046;
  double t2047;
  double t2025;
  double t2054;
  double t2055;
  double t2061;
  double t2062;
  double t2063;
  double t2064;
  double t2056;
  double t2057;
  double t2058;
  double t2059;
  double t2052;
  double t2053;
  double t2060;
  double t2065;
  double t2066;
  double t2067;
  double t2068;
  double t2069;
  double t2070;
  double t2071;
  double t2082;
  double t2083;
  double t2077;
  double t2078;
  double t2079;
  double t2072;
  double t2073;
  double t2076;
  double t2080;
  double t2081;
  double t2084;
  double t2085;
  double t2086;
  double t2087;
  double t2088;
  double t2089;
  double t2090;
  double t2091;
  double t2098;
  double t2100;
  double t2104;
  double t2105;
  double t2106;
  double t2120;
  double t2121;
  double t2099;
  double t2101;
  double t2102;
  double t2103;
  double t2107;
  double t2108;
  double t2128;
  double t2129;
  double t2130;
  double t2131;
  double t2122;
  double t2123;
  double t2124;
  double t2125;
  double t2110;
  double t2111;
  double t2112;
  double t2113;
  double t2114;
  double t2115;
  double t2143;
  double t2144;
  double t2146;
  double t2147;
  double t2148;
  double t2170;
  double t2171;
  double t2172;
  double t2173;
  double t2165;
  double t2166;
  double t2167;
  double t2168;
  double t2109;
  double t2116;
  double t2117;
  double t2186;
  double t2187;
  double t2188;
  double t2189;
  double t2190;
  double t2191;
  double t2192;
  double t2193;
  double t2119;
  double t2126;
  double t2127;
  double t2132;
  double t2133;
  double t2134;
  double t2135;
  double t2136;
  double t2137;
  double t2138;
  double t2139;
  double t2140;
  double t2141;
  double t2199;
  double t2211;
  double t2212;
  double t2205;
  double t2206;
  double t2207;
  double t2200;
  double t2145;
  double t2149;
  double t2150;
  double t2225;
  double t2226;
  double t2227;
  double t2152;
  double t2153;
  double t2154;
  double t2155;
  double t2156;
  double t2157;
  double t2158;
  double t2159;
  double t2160;
  double t2161;
  double t2162;
  double t2163;
  double t2233;
  double t2234;
  double t2235;
  double t2236;
  double t2237;
  double t2238;
  double t2239;
  double t2195;
  double t2201;
  double t2202;
  double t2177;
  double t2178;
  double t2179;
  double t2169;
  double t2174;
  double t2175;
  double t2251;
  double t2252;
  double t2253;
  double t2254;
  double t2255;
  double t2248;
  double t2249;
  double t2203;
  double t2204;
  double t2208;
  double t2209;
  double t2210;
  double t2213;
  double t2214;
  double t2215;
  double t2216;
  double t2217;
  double t2218;
  double t2219;
  double t2220;
  double t2244;
  double t2245;
  double t2246;
  double t2247;
  double t2257;
  double t2260;
  double t2262;
  double t2276;
  double t2277;
  double t2278;
  double t2272;
  double t2273;
  double t2274;
  double t2264;
  double t2176;
  double t2180;
  double t2181;
  double t2182;
  double t2250;
  double t2256;
  double t2258;
  double t2259;
  double t2261;
  double t2263;
  double t2265;
  double t2266;
  double t2267;
  double t2275;
  double t2279;
  double t2280;
  double t2281;
  double t2282;
  double t2283;
  double t2284;
  double t2285;
  double t2286;
  double t1512;
  double t1743;
  double t1750;
  double t1753;
  double t2299;
  double t2300;
  double t2301;
  double t2309;
  double t2310;
  double t2303;
  double t2304;
  double t2305;
  double t2306;
  double t2319;
  double t2320;
  double t2321;
  double t2322;
  double t2327;
  double t2328;
  double t2329;
  double t2330;
  double t2331;
  double t2338;
  double t2339;
  double t2340;
  double t2358;
  double t2359;
  double t2360;
  double t2342;
  double t2343;
  double t2344;
  double t2366;
  double t2367;
  double t2346;
  double t2347;
  double t2348;
  double t2377;
  double t2378;
  double t2379;
  double t1951;
  double t1959;
  double t1960;
  double t1961;
  double t2362;
  double t2368;
  double t2369;
  double t2370;
  double t2371;
  double t2372;
  double t2385;
  double t2386;
  double t2388;
  double t2389;
  double t2351;
  double t2352;
  double t2353;
  double t2354;
  double t2387;
  double t2390;
  double t2391;
  double t2396;
  double t2397;
  double t2398;
  double t2406;
  double t2407;
  double t2408;
  double t2413;
  double t2414;
  double t2048;
  double t2049;
  double t2050;
  double t2410;
  double t2420;
  double t2421;
  double t2422;
  double t2423;
  double t2424;
  double t2425;
  double t2428;
  double t2429;
  double t2430;
  double t2437;
  double t2438;
  double t2439;
  double t2457;
  double t2458;
  double t2459;
  double t2441;
  double t2442;
  double t2443;
  double t2465;
  double t2466;
  double t2445;
  double t2446;
  double t2447;
  double t2476;
  double t2477;
  double t2478;
  double t2232;
  double t2240;
  double t2241;
  double t2242;
  double t2461;
  double t2467;
  double t2468;
  double t2469;
  double t2470;
  double t2471;
  double t2484;
  double t2485;
  double t2486;
  double t2488;
  double t2450;
  double t2451;
  double t2452;
  double t2453;
  double t2487;
  double t2489;
  double t2490;
  double t2495;
  double t2496;
  double t2497;
  double t2295;
  double t2296;
  double t2297;
  double t1558;
  double t1584;
  double t1594;
  double t1811;
  double t1812;
  double t2335;
  double t2336;
  double t2527;
  double t2528;
  double t2529;
  double t2531;
  double t2532;
  double t2533;
  double t2518;
  double t2519;
  double t2520;
  double t2521;
  double t2612;
  double t2613;
  double t2614;
  double t2616;
  double t2617;
  double t2618;
  double t2619;
  double t2009;
  double t2010;
  double t2011;
  double t2402;
  double t2403;
  double t2404;
  double t2629;
  double t2630;
  double t2631;
  double t2632;
  double t2635;
  double t2636;
  double t2637;
  double t2638;
  double t2639;
  double t2622;
  double t2623;
  double t2624;
  double t2648;
  double t2649;
  double t2650;
  double t2095;
  double t2096;
  double t2434;
  double t2435;
  double t2667;
  double t2668;
  double t2669;
  double t2671;
  double t2672;
  double t2673;
  double t2658;
  double t2659;
  double t2660;
  double t2661;
  double t2753;
  double t2754;
  double t2755;
  double t2757;
  double t2758;
  double t2759;
  double t2760;
  double t2501;
  double t2502;
  double t2503;
  double t2290;
  double t2291;
  double t2292;
  double t2770;
  double t2771;
  double t2772;
  double t2773;
  double t2776;
  double t2777;
  double t2778;
  double t2779;
  double t2780;
  double t2763;
  double t2764;
  double t2765;
  double t2789;
  double t2790;
  double t2791;
  double t1700;
  double t1701;
  double t2302;
  double t2307;
  double t2800;
  double t2801;
  double t2802;
  double t2803;
  double t2567;
  double t2568;
  double t2570;
  double t1917;
  double t1940;
  double t1941;
  double t2365;
  double t2373;
  double t2374;
  double t2856;
  double t2857;
  double t2858;
  double t2860;
  double t2861;
  double t2862;
  double t2640;
  double t2641;
  double t2845;
  double t2850;
  double t1903;
  double t1913;
  double t1915;
  double t2357;
  double t2361;
  double t2363;
  double t2935;
  double t2936;
  double t2870;
  double t2871;
  double t2628;
  double t2633;
  double t2885;
  double t2887;
  double t2888;
  double t2892;
  double t2894;
  double t2895;
  double t2662;
  double t2663;
  double t2024;
  double t2026;
  double t2409;
  double t2411;
  double t2980;
  double t2981;
  double t2675;
  double t2676;
  double t2693;
  double t2694;
  double t2695;
  double t2679;
  double t2680;
  double t2681;
  double t2972;
  double t2973;
  double t2974;
  double t2975;
  double t2707;
  double t2708;
  double t2709;
  double t2710;
  double t2711;
  double t2712;
  double t2713;
  double t2714;
  double t2715;
  double t2716;
  double t2717;
  double t2718;
  double t2719;
  double t2720;
  double t2464;
  double t2472;
  double t2473;
  double t2198;
  double t2221;
  double t2222;
  double t3006;
  double t3007;
  double t3008;
  double t3010;
  double t3011;
  double t3012;
  double t2781;
  double t2782;
  double t2456;
  double t2460;
  double t2462;
  double t2185;
  double t2194;
  double t2196;
  double t3086;
  double t3087;
  double t3020;
  double t3021;
  double t2769;
  double t2774;
  double t3035;
  double t3037;
  double t3038;
  double t3042;
  double t3044;
  double t3045;
  t1561 = Sin(var1[2]);
  t1527 = Cos(var1[2]);
  t1612 = Cos(var1[3]);
  t1628 = Sin(var1[3]);
  t1622 = t1612*t1561;
  t1637 = -1.*t1527*t1628;
  t1642 = t1622 + t1637;
  t1654 = -1.*t1527*t1612;
  t1665 = -1.*t1561*t1628;
  t1670 = t1654 + t1665;
  t1689 = t1527*t1612;
  t1691 = t1561*t1628;
  t1692 = t1689 + t1691;
  t1711 = 1.38102*t1642*t1692;
  t1683 = -1.*t1612*t1561;
  t1684 = t1527*t1628;
  t1686 = t1683 + t1684;
  t1738 = 0.69051*t1642*t1686;
  t1739 = 0.69051*t1670*t1692;
  t1740 = Power(t1692,2);
  t1741 = 0.69051*t1740;
  t1688 = 0.0571880382*t1686;
  t1693 = 0.0007823478299999989*t1692;
  t1699 = t1688 + t1693;
  t1722 = 1.38102*t1686*t1692;
  t1724 = t1711 + t1722;
  t1744 = Power(t1686,2);
  t1745 = 0.69051*t1744;
  t1748 = t1738 + t1745 + t1739 + t1741;
  t1758 = -1.*t1612;
  t1759 = 1. + t1758;
  t1768 = -0.0695*t1759;
  t1769 = -0.15232*t1612;
  t1770 = 0.0011329999999999986*t1628;
  t1771 = t1768 + t1769 + t1770;
  t1760 = -0.0265*t1759;
  t1761 = -0.025367*t1612;
  t1762 = 0.08282*t1628;
  t1763 = t1760 + t1761 + t1762;
  t1643 = 0.0571880382*t1642;
  t1674 = 0.0007823478299999989*t1670;
  t1675 = t1643 + t1674;
  t1681 = -0.5*var2[3]*t1675;
  t1708 = 1.38102*t1642*t1670;
  t1715 = t1708 + t1711;
  t1729 = Power(t1642,2);
  t1734 = 0.69051*t1729;
  t1742 = t1734 + t1738 + t1739 + t1741;
  t1766 = -1.*t1612*t1763;
  t1773 = -1.*t1771*t1628;
  t1774 = t1766 + t1773;
  t1776 = t1612*t1771;
  t1777 = -1.*t1763*t1628;
  t1779 = t1776 + t1777;
  t1792 = 0.08282*t1612;
  t1793 = -0.0011329999999999986*t1628;
  t1794 = t1792 + t1793;
  t1789 = 0.0011329999999999986*t1612;
  t1790 = t1789 + t1762;
  t1775 = 0.69051*t1692*t1774;
  t1780 = 0.69051*t1686*t1779;
  t1781 = t1775 + t1780;
  t1782 = -0.5*var2[2]*t1781;
  t1788 = 0.69051*t1670*t1774;
  t1791 = t1612*t1790;
  t1795 = -1.*t1794*t1628;
  t1796 = t1766 + t1791 + t1795 + t1773;
  t1797 = 0.69051*t1692*t1796;
  t1798 = 0.69051*t1642*t1779;
  t1799 = -1.*t1612*t1794;
  t1800 = -1.*t1612*t1771;
  t1801 = t1763*t1628;
  t1802 = -1.*t1790*t1628;
  t1803 = t1799 + t1800 + t1801 + t1802;
  t1804 = 0.69051*t1642*t1803;
  t1805 = t1788 + t1797 + t1798 + t1804;
  t1814 = Cos(var1[4]);
  t1816 = Sin(var1[4]);
  t1822 = t1612*t1814;
  t1823 = -1.*t1628*t1816;
  t1824 = t1822 + t1823;
  t1838 = -1.*t1814;
  t1839 = 1. + t1838;
  t1815 = -1.*t1814*t1628;
  t1819 = -1.*t1612*t1816;
  t1820 = t1815 + t1819;
  t1821 = -1.*t1561*t1820;
  t1825 = t1527*t1824;
  t1826 = t1821 + t1825;
  t1846 = -0.2375*t1839;
  t1847 = -0.312342*t1814;
  t1848 = 0.0013409999999999984*t1816;
  t1849 = t1846 + t1847 + t1848;
  t1840 = -0.0265*t1839;
  t1841 = -0.025159*t1814;
  t1842 = 0.07484200000000002*t1816;
  t1843 = t1840 + t1841 + t1842;
  t1828 = t1814*t1628;
  t1829 = t1612*t1816;
  t1830 = t1828 + t1829;
  t1831 = t1527*t1830;
  t1832 = -1.*t1561*t1824;
  t1833 = t1831 + t1832;
  t1861 = t1561*t1830;
  t1862 = t1861 + t1825;
  t1864 = t1527*t1820;
  t1865 = t1561*t1824;
  t1866 = t1864 + t1865;
  t1888 = -0.0695*t1628;
  t1889 = -1.*t1628*t1849;
  t1890 = t1612*t1843;
  t1891 = t1760 + t1888 + t1889 + t1890;
  t1883 = 0.0265*t1628;
  t1884 = t1612*t1849;
  t1885 = t1628*t1843;
  t1886 = t1768 + t1883 + t1884 + t1885;
  t1827 = 0.0002629030499999997*t1826;
  t1834 = 0.014672774100000004*t1833;
  t1835 = t1827 + t1834;
  t1904 = 0.014672774100000004*t1866;
  t1905 = t1561*t1820;
  t1906 = -1.*t1612*t1814;
  t1907 = t1628*t1816;
  t1908 = t1906 + t1907;
  t1909 = t1527*t1908;
  t1910 = t1905 + t1909;
  t1911 = 0.0002629030499999997*t1910;
  t1912 = t1904 + t1911;
  t1837 = 0.0265*t1814;
  t1844 = t1814*t1843;
  t1845 = 0.0695*t1816;
  t1850 = t1849*t1816;
  t1851 = t1837 + t1844 + t1845 + t1850;
  t1852 = 0.19605*t1851*t1826;
  t1853 = -0.0695*t1814;
  t1854 = -1.*t1814*t1849;
  t1855 = 0.0265*t1816;
  t1856 = t1843*t1816;
  t1857 = t1853 + t1854 + t1855 + t1856;
  t1858 = 0.19605*t1857*t1833;
  t1859 = t1852 + t1858;
  t1918 = 0.19605*t1857*t1866;
  t1925 = 0.07484200000000002*t1814;
  t1926 = -0.0013409999999999984*t1816;
  t1927 = t1925 + t1926;
  t1922 = 0.0013409999999999984*t1814;
  t1923 = t1922 + t1842;
  t1919 = 0.19605*t1851*t1910;
  t1863 = 0.3921*t1862*t1833;
  t1867 = 0.3921*t1826*t1866;
  t1868 = t1863 + t1867;
  t1944 = 0.3921*t1862*t1866;
  t1945 = 0.3921*t1866*t1910;
  t1946 = t1944 + t1945;
  t1870 = Power(t1826,2);
  t1871 = 0.19605*t1870;
  t1872 = -1.*t1561*t1830;
  t1873 = -1.*t1527*t1824;
  t1874 = t1872 + t1873;
  t1875 = 0.19605*t1874*t1862;
  t1876 = Power(t1833,2);
  t1877 = 0.19605*t1876;
  t1878 = -1.*t1527*t1820;
  t1879 = t1878 + t1832;
  t1880 = 0.19605*t1879*t1866;
  t1881 = t1871 + t1875 + t1877 + t1880;
  t1952 = 0.19605*t1826*t1862;
  t1953 = 0.19605*t1833*t1866;
  t1954 = 0.19605*t1826*t1910;
  t1955 = -1.*t1561*t1908;
  t1956 = t1864 + t1955;
  t1957 = 0.19605*t1866*t1956;
  t1958 = t1952 + t1953 + t1954 + t1957;
  t1914 = -0.5*var2[4]*t1912;
  t1920 = t1918 + t1919;
  t1921 = -0.5*var2[3]*t1920;
  t1895 = t1891*t1820;
  t1896 = t1886*t1824;
  t1897 = t1895 + t1896;
  t1887 = -1.*t1886*t1830;
  t1892 = -1.*t1891*t1824;
  t1893 = t1887 + t1892;
  t1969 = -0.0695*t1612;
  t1970 = -0.0265*t1628;
  t1971 = -1.*t1612*t1849;
  t1972 = -1.*t1628*t1843;
  t1973 = t1969 + t1970 + t1971 + t1972;
  t1966 = 0.0265*t1612;
  t1967 = t1966 + t1888 + t1889 + t1890;
  t1924 = -1.*t1814*t1923;
  t1928 = t1927*t1816;
  t1929 = t1837 + t1844 + t1924 + t1845 + t1928 + t1850;
  t1930 = 0.19605*t1929*t1862;
  t1931 = 0.0695*t1814;
  t1932 = t1814*t1927;
  t1933 = t1814*t1849;
  t1934 = -0.0265*t1816;
  t1935 = -1.*t1843*t1816;
  t1936 = t1923*t1816;
  t1937 = t1931 + t1932 + t1933 + t1934 + t1935 + t1936;
  t1938 = 0.19605*t1937*t1866;
  t1939 = t1930 + t1918 + t1938 + t1919;
  t1963 = -0.5*var2[0]*t1946;
  t1964 = -0.5*var2[1]*t1958;
  t1978 = 0.19605*t1866*t1897;
  t1965 = -1.*t1891*t1820;
  t1975 = -1.*t1886*t1824;
  t1979 = 0.19605*t1893*t1910;
  t1981 = t1886*t1820;
  t1995 = t1612*t1927;
  t1996 = -1.*t1628*t1923;
  t1997 = t1995 + t1996;
  t1991 = t1628*t1927;
  t1992 = t1612*t1923;
  t1993 = t1991 + t1992;
  t1983 = t1891*t1908;
  t1894 = 0.19605*t1826*t1893;
  t1898 = 0.19605*t1833*t1897;
  t1899 = t1894 + t1898;
  t1900 = -0.5*var2[2]*t1899;
  t1968 = -1.*t1967*t1830;
  t1974 = -1.*t1973*t1824;
  t1976 = t1965 + t1968 + t1974 + t1975;
  t1977 = 0.19605*t1866*t1976;
  t1980 = t1973*t1820;
  t1982 = t1967*t1824;
  t1984 = t1980 + t1981 + t1982 + t1983;
  t1985 = 0.19605*t1862*t1984;
  t1986 = t1977 + t1978 + t1979 + t1985;
  t1994 = -1.*t1993*t1830;
  t1998 = -1.*t1997*t1824;
  t1999 = t1965 + t1994 + t1975 + t1998;
  t2000 = 0.19605*t1866*t1999;
  t2001 = t1997*t1820;
  t2002 = t1993*t1824;
  t2003 = t1981 + t2001 + t2002 + t1983;
  t2004 = 0.19605*t1862*t2003;
  t2005 = t1978 + t2000 + t1979 + t2004;
  t2013 = Cos(var1[5]);
  t2015 = Sin(var1[5]);
  t2014 = -1.*t2013*t1561;
  t2016 = -1.*t1527*t2015;
  t2017 = t2014 + t2016;
  t2018 = -0.0571880382*t2017;
  t2019 = t1527*t2013;
  t2020 = -1.*t1561*t2015;
  t2021 = t2019 + t2020;
  t2022 = -0.0007505843699999984*t2021;
  t2023 = t2018 + t2022;
  t2028 = 1.38102*t2017*t2021;
  t2029 = t2013*t1561;
  t2030 = t1527*t2015;
  t2031 = t2029 + t2030;
  t2032 = 1.38102*t2031*t2021;
  t2033 = t2028 + t2032;
  t2038 = Power(t2017,2);
  t2039 = 0.69051*t2038;
  t2040 = 0.69051*t2017*t2031;
  t2041 = Power(t2021,2);
  t2042 = 0.69051*t2041;
  t2043 = -1.*t1527*t2013;
  t2044 = t1561*t2015;
  t2045 = t2043 + t2044;
  t2046 = 0.69051*t2021*t2045;
  t2047 = t2039 + t2040 + t2042 + t2046;
  t2025 = -0.5*var2[5]*t2023;
  t2054 = -1.*t2013;
  t2055 = 1. + t2054;
  t2061 = -0.0265*t2055;
  t2062 = -0.025413*t2013;
  t2063 = -0.08282*t2015;
  t2064 = t2061 + t2062 + t2063;
  t2056 = -0.0695*t2055;
  t2057 = -0.15232*t2013;
  t2058 = -0.0010869999999999977*t2015;
  t2059 = t2056 + t2057 + t2058;
  t2052 = -0.5*var2[0]*t2033;
  t2053 = -0.5*var2[1]*t2047;
  t2060 = t2013*t2059;
  t2065 = t2064*t2015;
  t2066 = t2060 + t2065;
  t2067 = 0.69051*t2017*t2066;
  t2068 = -1.*t2013*t2064;
  t2069 = t2059*t2015;
  t2070 = t2068 + t2069;
  t2071 = 0.69051*t2021*t2070;
  t2082 = -0.08282*t2013;
  t2083 = t2082 + t2058;
  t2077 = -0.0010869999999999977*t2013;
  t2078 = 0.08282*t2015;
  t2079 = t2077 + t2078;
  t2072 = t2067 + t2071;
  t2073 = -0.5*var2[2]*t2072;
  t2076 = t2013*t2064;
  t2080 = t2013*t2079;
  t2081 = -1.*t2059*t2015;
  t2084 = t2083*t2015;
  t2085 = t2076 + t2080 + t2081 + t2084;
  t2086 = 0.69051*t2021*t2085;
  t2087 = -1.*t2013*t2083;
  t2088 = t2079*t2015;
  t2089 = t2060 + t2087 + t2065 + t2088;
  t2090 = 0.69051*t2031*t2089;
  t2091 = t2067 + t2071 + t2086 + t2090;
  t2098 = Cos(var1[6]);
  t2100 = Sin(var1[6]);
  t2104 = t2013*t2098;
  t2105 = -1.*t2015*t2100;
  t2106 = t2104 + t2105;
  t2120 = -1.*t2098;
  t2121 = 1. + t2120;
  t2099 = t2098*t2015;
  t2101 = t2013*t2100;
  t2102 = t2099 + t2101;
  t2103 = -1.*t1561*t2102;
  t2107 = t1527*t2106;
  t2108 = t2103 + t2107;
  t2128 = -0.2375*t2121;
  t2129 = -0.312334*t2098;
  t2130 = -0.0013430000000000004*t2100;
  t2131 = t2128 + t2129 + t2130;
  t2122 = -0.0265*t2121;
  t2123 = -0.025157*t2098;
  t2124 = -0.07483400000000001*t2100;
  t2125 = t2122 + t2123 + t2124;
  t2110 = -1.*t2098*t2015;
  t2111 = -1.*t2013*t2100;
  t2112 = t2110 + t2111;
  t2113 = t1527*t2112;
  t2114 = -1.*t1561*t2106;
  t2115 = t2113 + t2114;
  t2143 = t1561*t2112;
  t2144 = t2143 + t2107;
  t2146 = t1527*t2102;
  t2147 = t1561*t2106;
  t2148 = t2146 + t2147;
  t2170 = -0.0265*t2015;
  t2171 = -1.*t2015*t2125;
  t2172 = t2013*t2131;
  t2173 = t2056 + t2170 + t2171 + t2172;
  t2165 = 0.0695*t2015;
  t2166 = t2013*t2125;
  t2167 = t2015*t2131;
  t2168 = t2061 + t2165 + t2166 + t2167;
  t2109 = -0.0002632951500000001*t2108;
  t2116 = -0.014671205700000002*t2115;
  t2117 = t2109 + t2116;
  t2186 = -0.0002632951500000001*t2144;
  t2187 = -1.*t2013*t2098;
  t2188 = t2015*t2100;
  t2189 = t2187 + t2188;
  t2190 = t1561*t2189;
  t2191 = t2113 + t2190;
  t2192 = -0.014671205700000002*t2191;
  t2193 = t2186 + t2192;
  t2119 = -0.0265*t2098;
  t2126 = -1.*t2098*t2125;
  t2127 = 0.0695*t2100;
  t2132 = t2131*t2100;
  t2133 = t2119 + t2126 + t2127 + t2132;
  t2134 = 0.19605*t2133*t2108;
  t2135 = 0.0695*t2098;
  t2136 = t2098*t2131;
  t2137 = 0.0265*t2100;
  t2138 = t2125*t2100;
  t2139 = t2135 + t2136 + t2137 + t2138;
  t2140 = 0.19605*t2139*t2115;
  t2141 = t2134 + t2140;
  t2199 = 0.19605*t2133*t2144;
  t2211 = -0.07483400000000001*t2098;
  t2212 = t2211 + t2130;
  t2205 = -0.0013430000000000004*t2098;
  t2206 = 0.07483400000000001*t2100;
  t2207 = t2205 + t2206;
  t2200 = 0.19605*t2139*t2191;
  t2145 = 0.3921*t2144*t2115;
  t2149 = 0.3921*t2108*t2148;
  t2150 = t2145 + t2149;
  t2225 = 0.3921*t2144*t2148;
  t2226 = 0.3921*t2144*t2191;
  t2227 = t2225 + t2226;
  t2152 = -1.*t1561*t2112;
  t2153 = -1.*t1527*t2106;
  t2154 = t2152 + t2153;
  t2155 = 0.19605*t2154*t2144;
  t2156 = Power(t2108,2);
  t2157 = 0.19605*t2156;
  t2158 = Power(t2115,2);
  t2159 = 0.19605*t2158;
  t2160 = -1.*t1527*t2102;
  t2161 = t2160 + t2114;
  t2162 = 0.19605*t2161*t2148;
  t2163 = t2155 + t2157 + t2159 + t2162;
  t2233 = 0.19605*t2144*t2108;
  t2234 = 0.19605*t2115*t2148;
  t2235 = t1527*t2189;
  t2236 = t2152 + t2235;
  t2237 = 0.19605*t2144*t2236;
  t2238 = 0.19605*t2115*t2191;
  t2239 = t2233 + t2234 + t2237 + t2238;
  t2195 = -0.5*var2[6]*t2193;
  t2201 = t2199 + t2200;
  t2202 = -0.5*var2[5]*t2201;
  t2177 = -1.*t2173*t2112;
  t2178 = -1.*t2168*t2106;
  t2179 = t2177 + t2178;
  t2169 = t2168*t2102;
  t2174 = t2173*t2106;
  t2175 = t2169 + t2174;
  t2251 = -0.0265*t2013;
  t2252 = -0.0695*t2015;
  t2253 = -1.*t2013*t2125;
  t2254 = -1.*t2015*t2131;
  t2255 = t2251 + t2252 + t2253 + t2254;
  t2248 = 0.0695*t2013;
  t2249 = t2248 + t2170 + t2171 + t2172;
  t2203 = 0.0265*t2098;
  t2204 = t2098*t2125;
  t2208 = t2098*t2207;
  t2209 = -0.0695*t2100;
  t2210 = -1.*t2131*t2100;
  t2213 = t2212*t2100;
  t2214 = t2203 + t2204 + t2208 + t2209 + t2210 + t2213;
  t2215 = 0.19605*t2214*t2144;
  t2216 = -1.*t2098*t2212;
  t2217 = t2207*t2100;
  t2218 = t2135 + t2136 + t2216 + t2137 + t2138 + t2217;
  t2219 = 0.19605*t2218*t2148;
  t2220 = t2199 + t2215 + t2219 + t2200;
  t2244 = -0.5*var2[0]*t2227;
  t2245 = -0.5*var2[1]*t2239;
  t2246 = 0.19605*t2144*t2179;
  t2247 = t2173*t2112;
  t2257 = t2168*t2106;
  t2260 = 0.19605*t2175*t2191;
  t2262 = -1.*t2168*t2112;
  t2276 = -1.*t2015*t2212;
  t2277 = t2013*t2207;
  t2278 = t2276 + t2277;
  t2272 = t2013*t2212;
  t2273 = t2015*t2207;
  t2274 = t2272 + t2273;
  t2264 = -1.*t2173*t2189;
  t2176 = 0.19605*t2115*t2175;
  t2180 = 0.19605*t2108*t2179;
  t2181 = t2176 + t2180;
  t2182 = -0.5*var2[2]*t2181;
  t2250 = t2249*t2102;
  t2256 = t2255*t2106;
  t2258 = t2247 + t2250 + t2256 + t2257;
  t2259 = 0.19605*t2144*t2258;
  t2261 = -1.*t2255*t2112;
  t2263 = -1.*t2249*t2106;
  t2265 = t2261 + t2262 + t2263 + t2264;
  t2266 = 0.19605*t2148*t2265;
  t2267 = t2246 + t2259 + t2260 + t2266;
  t2275 = t2274*t2102;
  t2279 = t2278*t2106;
  t2280 = t2247 + t2275 + t2257 + t2279;
  t2281 = 0.19605*t2144*t2280;
  t2282 = -1.*t2278*t2112;
  t2283 = -1.*t2274*t2106;
  t2284 = t2262 + t2282 + t2283 + t2264;
  t2285 = 0.19605*t2148*t2284;
  t2286 = t2246 + t2281 + t2260 + t2285;
  t1512 = Power(var2[2],2);
  t1743 = -0.5*var2[3]*t1742;
  t1750 = -0.5*var2[2]*t1748;
  t1753 = t1743 + t1750;
  t2299 = 0.0007823478299999989*t1686;
  t2300 = 0.0571880382*t1670;
  t2301 = t2299 + t2300;
  t2309 = 1.38102*t1686*t1670;
  t2310 = t2309 + t1722;
  t2303 = 0.0007823478299999989*t1642;
  t2304 = 0.0571880382*t1692;
  t2305 = t2303 + t2304;
  t2306 = -0.5*var2[3]*t2305;
  t2319 = 0.69051*t1686*t1774;
  t2320 = 0.69051*t1670*t1779;
  t2321 = t2319 + t2320;
  t2322 = -0.5*var2[2]*t2321;
  t2327 = 0.69051*t1642*t1774;
  t2328 = 0.69051*t1686*t1796;
  t2329 = 0.69051*t1692*t1779;
  t2330 = 0.69051*t1692*t1803;
  t2331 = t2327 + t2328 + t2329 + t2330;
  t2338 = 0.014672774100000004*t1874;
  t2339 = 0.0002629030499999997*t1879;
  t2340 = t2338 + t2339;
  t2358 = 0.014672774100000004*t1826;
  t2359 = 0.0002629030499999997*t1956;
  t2360 = t2358 + t2359;
  t2342 = 0.19605*t1857*t1874;
  t2343 = 0.19605*t1851*t1879;
  t2344 = t2342 + t2343;
  t2366 = 0.19605*t1857*t1826;
  t2367 = 0.19605*t1851*t1956;
  t2346 = 0.3921*t1826*t1879;
  t2347 = 0.3921*t1874*t1833;
  t2348 = t2346 + t2347;
  t2377 = 0.3921*t1826*t1833;
  t2378 = 0.3921*t1826*t1956;
  t2379 = t2377 + t2378;
  t1951 = -0.5*var2[2]*t1881;
  t1959 = -0.5*var2[3]*t1958;
  t1960 = -0.5*var2[4]*t1958;
  t1961 = t1951 + t1959 + t1960;
  t2362 = -0.5*var2[4]*t2360;
  t2368 = t2366 + t2367;
  t2369 = -0.5*var2[3]*t2368;
  t2370 = 0.19605*t1937*t1826;
  t2371 = 0.19605*t1929*t1833;
  t2372 = t2366 + t2370 + t2371 + t2367;
  t2385 = -0.5*var2[1]*t2379;
  t2386 = -0.5*var2[0]*t1958;
  t2388 = 0.19605*t1826*t1897;
  t2389 = 0.19605*t1893*t1956;
  t2351 = 0.19605*t1879*t1893;
  t2352 = 0.19605*t1874*t1897;
  t2353 = t2351 + t2352;
  t2354 = -0.5*var2[2]*t2353;
  t2387 = 0.19605*t1826*t1976;
  t2390 = 0.19605*t1833*t1984;
  t2391 = t2387 + t2388 + t2389 + t2390;
  t2396 = 0.19605*t1826*t1999;
  t2397 = 0.19605*t1833*t2003;
  t2398 = t2388 + t2396 + t2389 + t2397;
  t2406 = -0.0007505843699999984*t2017;
  t2407 = -0.0571880382*t2045;
  t2408 = t2406 + t2407;
  t2413 = 1.38102*t2017*t2045;
  t2414 = t2028 + t2413;
  t2048 = -0.5*var2[2]*t2047;
  t2049 = -0.5*var2[5]*t2047;
  t2050 = t2048 + t2049;
  t2410 = -0.5*var2[5]*t2408;
  t2420 = -0.5*var2[1]*t2414;
  t2421 = -0.5*var2[0]*t2047;
  t2422 = 0.69051*t2045*t2066;
  t2423 = 0.69051*t2017*t2070;
  t2424 = t2422 + t2423;
  t2425 = -0.5*var2[2]*t2424;
  t2428 = 0.69051*t2017*t2085;
  t2429 = 0.69051*t2021*t2089;
  t2430 = t2422 + t2423 + t2428 + t2429;
  t2437 = -0.014671205700000002*t2154;
  t2438 = -0.0002632951500000001*t2161;
  t2439 = t2437 + t2438;
  t2457 = -0.0002632951500000001*t2115;
  t2458 = -0.014671205700000002*t2236;
  t2459 = t2457 + t2458;
  t2441 = 0.19605*t2139*t2154;
  t2442 = 0.19605*t2133*t2161;
  t2443 = t2441 + t2442;
  t2465 = 0.19605*t2133*t2115;
  t2466 = 0.19605*t2139*t2236;
  t2445 = 0.3921*t2154*t2115;
  t2446 = 0.3921*t2108*t2161;
  t2447 = t2445 + t2446;
  t2476 = 0.3921*t2108*t2115;
  t2477 = 0.3921*t2115*t2236;
  t2478 = t2476 + t2477;
  t2232 = -0.5*var2[2]*t2163;
  t2240 = -0.5*var2[5]*t2239;
  t2241 = -0.5*var2[6]*t2239;
  t2242 = t2232 + t2240 + t2241;
  t2461 = -0.5*var2[6]*t2459;
  t2467 = t2465 + t2466;
  t2468 = -0.5*var2[5]*t2467;
  t2469 = 0.19605*t2218*t2108;
  t2470 = 0.19605*t2214*t2115;
  t2471 = t2469 + t2465 + t2470 + t2466;
  t2484 = -0.5*var2[1]*t2478;
  t2485 = -0.5*var2[0]*t2239;
  t2486 = 0.19605*t2115*t2179;
  t2488 = 0.19605*t2175*t2236;
  t2450 = 0.19605*t2154*t2175;
  t2451 = 0.19605*t2161*t2179;
  t2452 = t2450 + t2451;
  t2453 = -0.5*var2[2]*t2452;
  t2487 = 0.19605*t2115*t2258;
  t2489 = 0.19605*t2108*t2265;
  t2490 = t2486 + t2487 + t2488 + t2489;
  t2495 = 0.19605*t2115*t2280;
  t2496 = 0.19605*t2108*t2284;
  t2497 = t2486 + t2495 + t2488 + t2496;
  t2295 = 0.0818382374*t1527;
  t2296 = -0.0464813926*t1561;
  t2297 = t2295 + t2296;
  t1558 = 0.0464813926*t1527;
  t1584 = 0.0818382374*t1561;
  t1594 = t1558 + t1584;
  t1811 = -0.5*var2[3]*t1805;
  t1812 = t1782 + t1811;
  t2335 = -0.5*var2[3]*t2331;
  t2336 = t2322 + t2335;
  t2527 = 0.0571880382*t1796;
  t2528 = 0.0007823478299999989*t1803;
  t2529 = t2527 + t2528;
  t2531 = 1.38102*t1796*t1779;
  t2532 = 1.38102*t1774*t1803;
  t2533 = t2531 + t2532;
  t2518 = t1760 + t1888;
  t2519 = -1.*t1527*t2518;
  t2520 = t1768 + t1883;
  t2521 = -1.*t1561*t2520;
  t2612 = 0.0002629030499999997*t1976;
  t2613 = 0.014672774100000004*t1984;
  t2614 = t2612 + t2613;
  t2616 = 0.19605*t1851*t1976;
  t2617 = 0.19605*t1857*t1984;
  t2618 = t2616 + t2617;
  t2619 = -0.5*var2[3]*t2618;
  t2009 = -0.5*var2[3]*t1986;
  t2010 = -0.5*var2[4]*t2005;
  t2011 = t1900 + t2009 + t2010;
  t2402 = -0.5*var2[3]*t2391;
  t2403 = -0.5*var2[4]*t2398;
  t2404 = t2354 + t2402 + t2403;
  t2629 = 0.0002629030499999997*t1999;
  t2630 = 0.014672774100000004*t2003;
  t2631 = t2629 + t2630;
  t2632 = -0.5*var2[4]*t2631;
  t2635 = 0.19605*t1937*t1893;
  t2636 = 0.19605*t1929*t1897;
  t2637 = 0.19605*t1851*t1999;
  t2638 = 0.19605*t1857*t2003;
  t2639 = t2635 + t2636 + t2637 + t2638;
  t2622 = 0.3921*t1893*t1976;
  t2623 = 0.3921*t1897*t1984;
  t2624 = t2622 + t2623;
  t2648 = 0.3921*t1893*t1999;
  t2649 = 0.3921*t1897*t2003;
  t2650 = t2648 + t2649;
  t2095 = -0.5*var2[5]*t2091;
  t2096 = t2073 + t2095;
  t2434 = -0.5*var2[5]*t2430;
  t2435 = t2425 + t2434;
  t2667 = -0.0571880382*t2085;
  t2668 = -0.0007505843699999984*t2089;
  t2669 = t2667 + t2668;
  t2671 = 1.38102*t2066*t2085;
  t2672 = 1.38102*t2070*t2089;
  t2673 = t2671 + t2672;
  t2658 = t2056 + t2170;
  t2659 = -1.*t1561*t2658;
  t2660 = t2061 + t2165;
  t2661 = -1.*t1527*t2660;
  t2753 = -0.014671205700000002*t2258;
  t2754 = -0.0002632951500000001*t2265;
  t2755 = t2753 + t2754;
  t2757 = 0.19605*t2139*t2258;
  t2758 = 0.19605*t2133*t2265;
  t2759 = t2757 + t2758;
  t2760 = -0.5*var2[5]*t2759;
  t2501 = -0.5*var2[5]*t2490;
  t2502 = -0.5*var2[6]*t2497;
  t2503 = t2453 + t2501 + t2502;
  t2290 = -0.5*var2[5]*t2267;
  t2291 = -0.5*var2[6]*t2286;
  t2292 = t2182 + t2290 + t2291;
  t2770 = -0.014671205700000002*t2280;
  t2771 = -0.0002632951500000001*t2284;
  t2772 = t2770 + t2771;
  t2773 = -0.5*var2[6]*t2772;
  t2776 = 0.19605*t2214*t2175;
  t2777 = 0.19605*t2218*t2179;
  t2778 = 0.19605*t2139*t2280;
  t2779 = 0.19605*t2133*t2284;
  t2780 = t2776 + t2777 + t2778 + t2779;
  t2763 = 0.3921*t2175*t2258;
  t2764 = 0.3921*t2179*t2265;
  t2765 = t2763 + t2764;
  t2789 = 0.3921*t2175*t2280;
  t2790 = 0.3921*t2179*t2284;
  t2791 = t2789 + t2790;
  t1700 = -0.5*var2[2]*t1699;
  t1701 = t1681 + t1700;
  t2302 = -0.5*var2[2]*t2301;
  t2307 = t2302 + t2306;
  t2800 = t1966 + t1888;
  t2801 = t1527*t2800;
  t2802 = t1969 + t1970;
  t2803 = -1.*t1561*t2802;
  t2567 = -0.2375*t1816;
  t2568 = t1840 + t2567;
  t2570 = t1846 + t1855;
  t1917 = -0.5*var2[2]*t1859;
  t1940 = -0.5*var2[4]*t1939;
  t1941 = t1917 + t1921 + t1940;
  t2365 = -0.5*var2[2]*t2344;
  t2373 = -0.5*var2[4]*t2372;
  t2374 = t2365 + t2369 + t2373;
  t2856 = 0.014672774100000004*t1929;
  t2857 = 0.0002629030499999997*t1937;
  t2858 = t2856 + t2857;
  t2860 = 0.3921*t1929*t1857;
  t2861 = 0.3921*t1851*t1937;
  t2862 = t2860 + t2861;
  t2640 = -0.5*var2[4]*t2639;
  t2641 = t2619 + t2640;
  t2845 = t1814*t1692;
  t2850 = -1.*t1692*t1816;
  t1903 = -0.5*var2[2]*t1835;
  t1913 = -0.5*var2[3]*t1912;
  t1915 = t1903 + t1913 + t1914;
  t2357 = -0.5*var2[2]*t2340;
  t2361 = -0.5*var2[3]*t2360;
  t2363 = t2357 + t2361 + t2362;
  t2935 = -0.5*var2[0]*t1912;
  t2936 = -0.5*var2[1]*t2360;
  t2870 = 0.5*var2[0]*t1912;
  t2871 = 0.5*var2[1]*t2360;
  t2628 = -0.5*var2[3]*t2614;
  t2633 = t2628 + t2632;
  t2885 = 0.5*var2[4]*t1912;
  t2887 = 0.5*var2[0]*t1946;
  t2888 = 0.5*var2[1]*t1958;
  t2892 = 0.5*var2[4]*t2360;
  t2894 = 0.5*var2[1]*t2379;
  t2895 = 0.5*var2[0]*t1958;
  t2662 = -0.15232*t2017;
  t2663 = -0.025413*t2045;
  t2024 = -0.5*var2[2]*t2023;
  t2026 = t2024 + t2025;
  t2409 = -0.5*var2[2]*t2408;
  t2411 = t2409 + t2410;
  t2980 = -0.5*var2[0]*t2023;
  t2981 = -0.5*var2[1]*t2408;
  t2675 = 0.5*var2[0]*t2023;
  t2676 = 0.5*var2[1]*t2408;
  t2693 = 0.5*var2[5]*t2023;
  t2694 = 0.5*var2[0]*t2033;
  t2695 = 0.5*var2[1]*t2047;
  t2679 = 0.5*var2[5]*t2408;
  t2680 = 0.5*var2[1]*t2414;
  t2681 = 0.5*var2[0]*t2047;
  t2972 = t2251 + t2252;
  t2973 = t1527*t2972;
  t2974 = t2248 + t2170;
  t2975 = -1.*t1561*t2974;
  t2707 = -0.0265*t2100;
  t2708 = t2128 + t2707;
  t2709 = t2017*t2708;
  t2710 = 0.2375*t2100;
  t2711 = t2122 + t2710;
  t2712 = t2045*t2711;
  t2713 = t2098*t2045;
  t2714 = -1.*t2017*t2100;
  t2715 = t2713 + t2714;
  t2716 = -0.025157*t2715;
  t2717 = t2098*t2017;
  t2718 = t2045*t2100;
  t2719 = t2717 + t2718;
  t2720 = -0.312334*t2719;
  t2464 = -0.5*var2[2]*t2443;
  t2472 = -0.5*var2[6]*t2471;
  t2473 = t2464 + t2468 + t2472;
  t2198 = -0.5*var2[2]*t2141;
  t2221 = -0.5*var2[6]*t2220;
  t2222 = t2198 + t2202 + t2221;
  t3006 = -0.014671205700000002*t2214;
  t3007 = -0.0002632951500000001*t2218;
  t3008 = t3006 + t3007;
  t3010 = 0.3921*t2139*t2214;
  t3011 = 0.3921*t2133*t2218;
  t3012 = t3010 + t3011;
  t2781 = -0.5*var2[6]*t2780;
  t2782 = t2760 + t2781;
  t2456 = -0.5*var2[2]*t2439;
  t2460 = -0.5*var2[5]*t2459;
  t2462 = t2456 + t2460 + t2461;
  t2185 = -0.5*var2[2]*t2117;
  t2194 = -0.5*var2[5]*t2193;
  t2196 = t2185 + t2194 + t2195;
  t3086 = -0.5*var2[1]*t2459;
  t3087 = -0.5*var2[0]*t2193;
  t3020 = 0.5*var2[1]*t2459;
  t3021 = 0.5*var2[0]*t2193;
  t2769 = -0.5*var2[5]*t2755;
  t2774 = t2769 + t2773;
  t3035 = 0.5*var2[6]*t2459;
  t3037 = 0.5*var2[1]*t2478;
  t3038 = 0.5*var2[0]*t2239;
  t3042 = 0.5*var2[6]*t2193;
  t3044 = 0.5*var2[0]*t2227;
  t3045 = 0.5*var2[1]*t2239;
  p_output1[0]=-1.*t1512*t1594 + t1753*var2[1] + t1961*var2[1] + t2050*var2[1] + t2242*var2[1] + t1812*var2[2] + t2011*var2[2] + (t2025 + t2052 + t2053 + t2073)*var2[2] + t2096*var2[2] + t2292*var2[2] + t1701*var2[3] + t1941*var2[3] + (t1681 - 0.5*t1715*var2[0] - 0.5*t1742*var2[1] - 0.5*t1805*var2[2])*var2[3] + (t1914 + t1921 + t1963 + t1964 - 0.5*t1986*var2[2])*var2[3] + var2[2]*(t1782 - 0.5*t1724*var2[0] - 0.5*t1748*var2[1] - 0.5*t1699*var2[3]) + var2[0]*(-0.5*t1724*var2[2] - 0.5*t1715*var2[3]) + t1915*var2[4] + (t1914 + t1963 + t1964 - 0.5*t2005*var2[2] - 0.5*t1939*var2[3])*var2[4] + var2[2]*(t1900 - 0.5*t1868*var2[0] - 0.5*t1881*var2[1] - 0.5*t1859*var2[3] - 0.5*t1835*var2[4]) + var2[0]*(-0.5*t1868*var2[2] - 0.5*t1946*var2[3] - 0.5*t1946*var2[4]) + t2026*var2[5] + t2222*var2[5] + (t2025 + t2052 + t2053 - 0.5*t2091*var2[2])*var2[5] + (t2195 + t2202 + t2244 + t2245 - 0.5*t2267*var2[2])*var2[5] + var2[0]*(-0.5*t2033*var2[2] - 0.5*t2033*var2[5]) + t2196*var2[6] + (t2195 + t2244 + t2245 - 0.5*t2286*var2[2] - 0.5*t2220*var2[5])*var2[6] + var2[2]*(t2182 - 0.5*t2150*var2[0] - 0.5*t2163*var2[1] - 0.5*t2141*var2[5] - 0.5*t2117*var2[6]) + var2[0]*(-0.5*t2150*var2[2] - 0.5*t2227*var2[5] - 0.5*t2227*var2[6]);
  p_output1[1]=-34.626553200000004 - 1.*t1512*t2297 + t1753*var2[0] + t1961*var2[0] + t2050*var2[0] + t2242*var2[0] + t2336*var2[2] + t2404*var2[2] + (t2410 + t2420 + t2421 + t2425)*var2[2] + t2435*var2[2] + t2503*var2[2] + t2307*var2[3] + t2374*var2[3] + (t2306 - 0.5*t1742*var2[0] - 0.5*t1724*var2[1] - 0.5*t2331*var2[2])*var2[3] + (t2362 + t2369 + t2385 + t2386 - 0.5*t2391*var2[2])*var2[3] + var2[1]*(-0.5*t2310*var2[2] - 0.5*t1724*var2[3]) + var2[2]*(t2322 - 0.5*t1748*var2[0] - 0.5*t2310*var2[1] - 0.5*t2301*var2[3]) + t2363*var2[4] + (t2362 + t2385 + t2386 - 0.5*t2398*var2[2] - 0.5*t2372*var2[3])*var2[4] + var2[2]*(t2354 - 0.5*t1881*var2[0] - 0.5*t2348*var2[1] - 0.5*t2344*var2[3] - 0.5*t2340*var2[4]) + var2[1]*(-0.5*t2348*var2[2] - 0.5*t2379*var2[3] - 0.5*t2379*var2[4]) + t2411*var2[5] + t2473*var2[5] + (t2410 + t2420 + t2421 - 0.5*t2430*var2[2])*var2[5] + (t2461 + t2468 + t2484 + t2485 - 0.5*t2490*var2[2])*var2[5] + var2[1]*(-0.5*t2414*var2[2] - 0.5*t2414*var2[5]) + t2462*var2[6] + (t2461 + t2484 + t2485 - 0.5*t2497*var2[2] - 0.5*t2471*var2[5])*var2[6] + var2[2]*(t2453 - 0.5*t2163*var2[0] - 0.5*t2447*var2[1] - 0.5*t2443*var2[5] - 0.5*t2439*var2[6]) + var2[1]*(-0.5*t2447*var2[2] - 0.5*t2478*var2[5] - 0.5*t2478*var2[6]);
  p_output1[2]=-17.232246*(0.026461*t1527 + 0.046589*t1561) - 6.7739031*(-0.025367*t1670 - 0.15232*t1686 + t2519 + t2521) - 1.9232505000000002*(-0.312342*(t1686*t1814 - 1.*t1670*t1816) - 0.025159*(t1670*t1814 + t1686*t1816) + t2519 + t2521 + t1670*t2568 + t1686*t2570) - 6.7739031*(t2659 + t2661 + t2662 + t2663) - 1.9232505000000002*(t2659 + t2661 + t2709 + t2712 + t2716 + t2720) + t1812*var2[0] + t2011*var2[0] + t2096*var2[0] + t2292*var2[0] + t2336*var2[1] + t2404*var2[1] + t2435*var2[1] + t2503*var2[1] + (-0.5*t1594*var2[0] - 0.5*t2297*var2[1])*var2[2] + (0.5*t1594*var2[0] + 0.5*t2297*var2[1])*var2[2] + (-0.5*t1781*var2[0] - 0.5*t2321*var2[1])*var2[2] + (0.5*t1781*var2[0] + 0.5*t2321*var2[1])*var2[2] + (-0.5*t1899*var2[0] - 0.5*t2353*var2[1])*var2[2] + (0.5*t1899*var2[0] + 0.5*t2353*var2[1])*var2[2] + (-0.5*t2072*var2[0] - 0.5*t2424*var2[1])*var2[2] + (0.5*t2072*var2[0] + 0.5*t2424*var2[1])*var2[2] + (-0.5*t2181*var2[0] - 0.5*t2452*var2[1])*var2[2] + (0.5*t2181*var2[0] + 0.5*t2452*var2[1])*var2[2] + var2[0]*(t2693 + t2694 + t2695 + 0.5*t2072*var2[2]) + var2[1]*(t2679 + t2680 + t2681 + 0.5*t2424*var2[2]) + t2641*var2[3] + (0.5*t1699*var2[0] + 0.5*t2301*var2[1])*var2[3] + (0.5*t1859*var2[0] + 0.5*t2344*var2[1])*var2[3] - 0.5*t2533*var2[2]*var2[3] - 0.5*t2529*Power(var2[3],2) + var2[0]*(0.5*t1724*var2[0] + 0.5*t1748*var2[1] + 0.5*t1781*var2[2] + 0.5*t1699*var2[3]) + var2[1]*(0.5*t1748*var2[0] + 0.5*t2310*var2[1] + 0.5*t2321*var2[2] + 0.5*t2301*var2[3]) + var2[3]*(-0.5*t1805*var2[0] - 0.5*t2331*var2[1] - 0.5*t2533*var2[2] - 0.5*t2529*var2[3]) + t2633*var2[4] + (0.5*t1835*var2[0] + 0.5*t2340*var2[1])*var2[4] + (t2632 - 0.5*t2005*var2[0] - 0.5*t2398*var2[1] - 0.5*t2650*var2[2] - 0.5*t2639*var2[3])*var2[4] + var2[0]*(0.5*t1868*var2[0] + 0.5*t1881*var2[1] + 0.5*t1899*var2[2] + 0.5*t1859*var2[3] + 0.5*t1835*var2[4]) + var2[1]*(0.5*t1881*var2[0] + 0.5*t2348*var2[1] + 0.5*t2353*var2[2] + 0.5*t2344*var2[3] + 0.5*t2340*var2[4]) + var2[3]*(t2619 - 0.5*t1986*var2[0] - 0.5*t2391*var2[1] - 0.5*t2624*var2[2] - 0.5*t2614*var2[4]) + var2[2]*(-0.5*t2624*var2[3] - 0.5*t2650*var2[4]) + (t2675 + t2676)*var2[5] + t2782*var2[5] + (0.5*t2141*var2[0] + 0.5*t2443*var2[1])*var2[5] - 0.5*t2673*var2[2]*var2[5] - 0.5*t2669*Power(var2[5],2) + var2[5]*(-0.5*t2091*var2[0] - 0.5*t2430*var2[1] - 0.5*t2673*var2[2] - 0.5*t2669*var2[5]) + t2774*var2[6] + (0.5*t2117*var2[0] + 0.5*t2439*var2[1])*var2[6] + (t2773 - 0.5*t2286*var2[0] - 0.5*t2497*var2[1] - 0.5*t2791*var2[2] - 0.5*t2780*var2[5])*var2[6] + var2[0]*(0.5*t2150*var2[0] + 0.5*t2163*var2[1] + 0.5*t2181*var2[2] + 0.5*t2141*var2[5] + 0.5*t2117*var2[6]) + var2[1]*(0.5*t2163*var2[0] + 0.5*t2447*var2[1] + 0.5*t2452*var2[2] + 0.5*t2443*var2[5] + 0.5*t2439*var2[6]) + var2[5]*(t2760 - 0.5*t2267*var2[0] - 0.5*t2490*var2[1] - 0.5*t2765*var2[2] - 0.5*t2755*var2[6]) + var2[2]*(-0.5*t2765*var2[5] - 0.5*t2791*var2[6]);
  p_output1[3]=-6.7739031*(-0.15232*t1642 - 0.025367*t1692 + t2801 + t2803) - 1.9232505000000002*(t1692*t2568 + t1642*t2570 + t2801 + t2803 - 0.025159*(t1642*t1816 + t2845) - 0.312342*(t1642*t1814 + t2850)) + t1701*var2[0] + t1941*var2[0] + t2307*var2[1] + t2374*var2[1] + t2641*var2[2] + (-0.5*t1699*var2[0] - 0.5*t2301*var2[1])*var2[2] + (-0.5*t1859*var2[0] - 0.5*t2344*var2[1])*var2[2] - 0.5*t2529*var2[2]*var2[3] + (-0.5*t1675*var2[0] - 0.5*t2305*var2[1] - 0.5*t2529*var2[2])*var2[3] + (0.5*t1675*var2[0] + 0.5*t2305*var2[1] + 0.5*t2529*var2[2])*var2[3] + (-0.5*t1920*var2[0] - 0.5*t2368*var2[1] - 0.5*t2618*var2[2])*var2[3] + (0.5*t1920*var2[0] + 0.5*t2368*var2[1] + 0.5*t2618*var2[2])*var2[3] + var2[0]*(0.5*t1715*var2[0] + 0.5*t1742*var2[1] + 0.5*t1805*var2[2] + 0.5*t1675*var2[3]) + var2[0]*(t2885 + t2887 + t2888 + 0.5*t1986*var2[2] + 0.5*t1920*var2[3]) + var2[1]*(0.5*t1742*var2[0] + 0.5*t1724*var2[1] + 0.5*t2331*var2[2] + 0.5*t2305*var2[3]) + var2[1]*(t2892 + t2894 + t2895 + 0.5*t2391*var2[2] + 0.5*t2368*var2[3]) + var2[2]*(0.5*t1805*var2[0] + 0.5*t2331*var2[1] + 0.5*t2533*var2[2] + 0.5*t2529*var2[3]) + (t2870 + t2871 + 0.5*t2614*var2[2])*var2[4] - 0.5*t2862*var2[3]*var2[4] - 0.5*t2858*Power(var2[4],2) + var2[2]*(0.5*t1986*var2[0] + 0.5*t2391*var2[1] + 0.5*t2624*var2[2] + 0.5*t2618*var2[3] + 0.5*t2614*var2[4]) + var2[4]*(-0.5*t1939*var2[0] - 0.5*t2372*var2[1] - 0.5*t2639*var2[2] - 0.5*t2862*var2[3] - 0.5*t2858*var2[4]);
  p_output1[4]=-1.9232505000000002*(t1686*(-0.2375*t1814 + t1934) + t1692*(t1837 + t2567) - 0.025159*(-1.*t1686*t1816 + t2845) - 0.312342*(-1.*t1686*t1814 + t2850)) + t1915*var2[0] + t2363*var2[1] + t2633*var2[2] + (-0.5*t1835*var2[0] - 0.5*t2340*var2[1])*var2[2] + (t2935 + t2936 - 0.5*t2614*var2[2])*var2[3] + var2[0]*(t2885 + t2887 + t2888 + 0.5*t2005*var2[2] + 0.5*t1939*var2[3]) + var2[1]*(t2892 + t2894 + t2895 + 0.5*t2398*var2[2] + 0.5*t2372*var2[3]) - 0.5*t2858*var2[3]*var2[4] + (t2935 + t2936 - 0.5*t2631*var2[2] - 0.5*t2858*var2[3])*var2[4] + (t2870 + t2871 + 0.5*t2631*var2[2] + 0.5*t2858*var2[3])*var2[4] + var2[2]*(0.5*t2005*var2[0] + 0.5*t2398*var2[1] + 0.5*t2650*var2[2] + 0.5*t2639*var2[3] + 0.5*t2631*var2[4]) + var2[3]*(0.5*t1939*var2[0] + 0.5*t2372*var2[1] + 0.5*t2639*var2[2] + 0.5*t2862*var2[3] + 0.5*t2858*var2[4]);
  p_output1[5]=-6.7739031*(t2662 + t2663 + t2973 + t2975) - 1.9232505000000002*(t2709 + t2712 + t2716 + t2720 + t2973 + t2975) + t2026*var2[0] + t2222*var2[0] + t2411*var2[1] + t2473*var2[1] + t2782*var2[2] + (t2980 + t2981)*var2[2] + (-0.5*t2141*var2[0] - 0.5*t2443*var2[1])*var2[2] + var2[0]*(t2693 + t2694 + t2695 + 0.5*t2091*var2[2]) + var2[1]*(t2679 + t2680 + t2681 + 0.5*t2430*var2[2]) - 0.5*t2669*var2[2]*var2[5] + (t2980 + t2981 - 0.5*t2669*var2[2])*var2[5] + (t2675 + t2676 + 0.5*t2669*var2[2])*var2[5] + (-0.5*t2201*var2[0] - 0.5*t2467*var2[1] - 0.5*t2759*var2[2])*var2[5] + (0.5*t2201*var2[0] + 0.5*t2467*var2[1] + 0.5*t2759*var2[2])*var2[5] + var2[0]*(t3042 + t3044 + t3045 + 0.5*t2267*var2[2] + 0.5*t2201*var2[5]) + var2[1]*(t3035 + t3037 + t3038 + 0.5*t2490*var2[2] + 0.5*t2467*var2[5]) + var2[2]*(0.5*t2091*var2[0] + 0.5*t2430*var2[1] + 0.5*t2673*var2[2] + 0.5*t2669*var2[5]) + (t3020 + t3021 + 0.5*t2755*var2[2])*var2[6] - 0.5*t3012*var2[5]*var2[6] - 0.5*t3008*Power(var2[6],2) + var2[2]*(0.5*t2267*var2[0] + 0.5*t2490*var2[1] + 0.5*t2765*var2[2] + 0.5*t2759*var2[5] + 0.5*t2755*var2[6]) + var2[6]*(-0.5*t2220*var2[0] - 0.5*t2471*var2[1] - 0.5*t2780*var2[2] - 0.5*t3012*var2[5] - 0.5*t3008*var2[6]);
  p_output1[6]=-1.9232505000000002*(t2021*(-0.2375*t2100 + t2119) + t2017*(0.2375*t2098 + t2707) - 0.025157*(-1.*t2021*t2098 + t2714) - 0.312334*(-1.*t2021*t2100 + t2717)) + t2196*var2[0] + t2462*var2[1] + t2774*var2[2] + (-0.5*t2117*var2[0] - 0.5*t2439*var2[1])*var2[2] + (t3086 + t3087 - 0.5*t2755*var2[2])*var2[5] + var2[0]*(t3042 + t3044 + t3045 + 0.5*t2286*var2[2] + 0.5*t2220*var2[5]) + var2[1]*(t3035 + t3037 + t3038 + 0.5*t2497*var2[2] + 0.5*t2471*var2[5]) - 0.5*t3008*var2[5]*var2[6] + (t3086 + t3087 - 0.5*t2772*var2[2] - 0.5*t3008*var2[5])*var2[6] + (t3020 + t3021 + 0.5*t2772*var2[2] + 0.5*t3008*var2[5])*var2[6] + var2[2]*(0.5*t2286*var2[0] + 0.5*t2497*var2[1] + 0.5*t2791*var2[2] + 0.5*t2780*var2[5] + 0.5*t2772*var2[6]) + var2[5]*(0.5*t2220*var2[0] + 0.5*t2471*var2[1] + 0.5*t2780*var2[2] + 0.5*t3012*var2[5] + 0.5*t3008*var2[6]);
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 7, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "CGvec_five_link_walker.hh"

namespace SymFunction
{

void CGvec_five_link_walker_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
