/*
 * Automatically Generated from Mathematica.
 * Fri 26 Apr 2024 13:34:57 GMT-05:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t1618;
  double t1584;
  double t1669;
  double t1685;
  double t1679;
  double t1694;
  double t1699;
  double t1711;
  double t1722;
  double t1727;
  double t1746;
  double t1748;
  double t1749;
  double t1768;
  double t1740;
  double t1741;
  double t1743;
  double t1795;
  double t1796;
  double t1797;
  double t1798;
  double t1745;
  double t1750;
  double t1756;
  double t1779;
  double t1781;
  double t1801;
  double t1802;
  double t1805;
  double t1815;
  double t1816;
  double t1825;
  double t1826;
  double t1827;
  double t1828;
  double t1817;
  double t1818;
  double t1819;
  double t1820;
  double t1700;
  double t1731;
  double t1732;
  double t1738;
  double t1765;
  double t1772;
  double t1786;
  double t1791;
  double t1799;
  double t1823;
  double t1830;
  double t1831;
  double t1833;
  double t1834;
  double t1836;
  double t1849;
  double t1850;
  double t1851;
  double t1846;
  double t1847;
  double t1832;
  double t1837;
  double t1838;
  double t1839;
  double t1845;
  double t1848;
  double t1852;
  double t1853;
  double t1854;
  double t1855;
  double t1856;
  double t1857;
  double t1858;
  double t1859;
  double t1860;
  double t1861;
  double t1862;
  double t1871;
  double t1873;
  double t1879;
  double t1880;
  double t1881;
  double t1895;
  double t1896;
  double t1872;
  double t1876;
  double t1877;
  double t1878;
  double t1882;
  double t1883;
  double t1903;
  double t1904;
  double t1905;
  double t1906;
  double t1897;
  double t1898;
  double t1899;
  double t1900;
  double t1885;
  double t1886;
  double t1887;
  double t1888;
  double t1889;
  double t1890;
  double t1918;
  double t1919;
  double t1921;
  double t1922;
  double t1923;
  double t1945;
  double t1946;
  double t1947;
  double t1948;
  double t1940;
  double t1941;
  double t1942;
  double t1943;
  double t1884;
  double t1891;
  double t1892;
  double t1961;
  double t1962;
  double t1963;
  double t1964;
  double t1965;
  double t1966;
  double t1967;
  double t1968;
  double t1969;
  double t1894;
  double t1901;
  double t1902;
  double t1907;
  double t1908;
  double t1909;
  double t1910;
  double t1911;
  double t1912;
  double t1913;
  double t1914;
  double t1915;
  double t1916;
  double t1975;
  double t1982;
  double t1983;
  double t1984;
  double t1979;
  double t1980;
  double t1976;
  double t1920;
  double t1924;
  double t1925;
  double t2001;
  double t2002;
  double t2003;
  double t1927;
  double t1928;
  double t1929;
  double t1930;
  double t1931;
  double t1932;
  double t1933;
  double t1934;
  double t1935;
  double t1936;
  double t1937;
  double t1938;
  double t2009;
  double t2010;
  double t2011;
  double t2012;
  double t2013;
  double t2014;
  double t2015;
  double t1971;
  double t1977;
  double t1978;
  double t1952;
  double t1953;
  double t1954;
  double t1944;
  double t1949;
  double t1950;
  double t2026;
  double t2027;
  double t2028;
  double t2029;
  double t2030;
  double t2023;
  double t2024;
  double t1981;
  double t1985;
  double t1986;
  double t1987;
  double t1988;
  double t1989;
  double t1990;
  double t1991;
  double t1992;
  double t1993;
  double t1994;
  double t1995;
  double t1996;
  double t2020;
  double t2021;
  double t2035;
  double t2022;
  double t2032;
  double t2036;
  double t2038;
  double t2052;
  double t2053;
  double t2054;
  double t2048;
  double t2049;
  double t2050;
  double t2040;
  double t1951;
  double t1955;
  double t1956;
  double t1957;
  double t2025;
  double t2031;
  double t2033;
  double t2034;
  double t2037;
  double t2039;
  double t2041;
  double t2042;
  double t2043;
  double t2051;
  double t2055;
  double t2056;
  double t2057;
  double t2058;
  double t2059;
  double t2060;
  double t2061;
  double t2062;
  double t2070;
  double t2072;
  double t2071;
  double t2073;
  double t2074;
  double t2075;
  double t2076;
  double t2077;
  double t2078;
  double t2079;
  double t2080;
  double t2085;
  double t2086;
  double t2087;
  double t2088;
  double t2089;
  double t2090;
  double t2095;
  double t2096;
  double t2097;
  double t2098;
  double t2099;
  double t2100;
  double t2101;
  double t2102;
  double t2103;
  double t2104;
  double t2082;
  double t2111;
  double t2112;
  double t2118;
  double t2119;
  double t2120;
  double t2121;
  double t2113;
  double t2114;
  double t2115;
  double t2116;
  double t2109;
  double t2110;
  double t2117;
  double t2122;
  double t2123;
  double t2124;
  double t2125;
  double t2126;
  double t2127;
  double t2128;
  double t2139;
  double t2140;
  double t2134;
  double t2135;
  double t2136;
  double t2129;
  double t2130;
  double t2133;
  double t2137;
  double t2138;
  double t2141;
  double t2142;
  double t2143;
  double t2144;
  double t2145;
  double t2146;
  double t2147;
  double t2148;
  double t2155;
  double t2157;
  double t2161;
  double t2162;
  double t2163;
  double t2177;
  double t2178;
  double t2156;
  double t2158;
  double t2159;
  double t2160;
  double t2164;
  double t2165;
  double t2185;
  double t2186;
  double t2187;
  double t2188;
  double t2179;
  double t2180;
  double t2181;
  double t2182;
  double t2167;
  double t2168;
  double t2169;
  double t2170;
  double t2171;
  double t2172;
  double t2200;
  double t2201;
  double t2203;
  double t2204;
  double t2205;
  double t2227;
  double t2228;
  double t2229;
  double t2230;
  double t2222;
  double t2223;
  double t2224;
  double t2225;
  double t2166;
  double t2173;
  double t2174;
  double t2243;
  double t2244;
  double t2245;
  double t2246;
  double t2247;
  double t2248;
  double t2249;
  double t2250;
  double t2176;
  double t2183;
  double t2184;
  double t2189;
  double t2190;
  double t2191;
  double t2192;
  double t2193;
  double t2194;
  double t2195;
  double t2196;
  double t2197;
  double t2198;
  double t2256;
  double t2268;
  double t2269;
  double t2262;
  double t2263;
  double t2264;
  double t2257;
  double t2202;
  double t2206;
  double t2207;
  double t2282;
  double t2283;
  double t2284;
  double t2209;
  double t2210;
  double t2211;
  double t2212;
  double t2213;
  double t2214;
  double t2215;
  double t2216;
  double t2217;
  double t2218;
  double t2219;
  double t2220;
  double t2290;
  double t2291;
  double t2292;
  double t2293;
  double t2294;
  double t2295;
  double t2296;
  double t2252;
  double t2258;
  double t2259;
  double t2234;
  double t2235;
  double t2236;
  double t2226;
  double t2231;
  double t2232;
  double t2308;
  double t2309;
  double t2310;
  double t2311;
  double t2312;
  double t2305;
  double t2306;
  double t2260;
  double t2261;
  double t2265;
  double t2266;
  double t2267;
  double t2270;
  double t2271;
  double t2272;
  double t2273;
  double t2274;
  double t2275;
  double t2276;
  double t2277;
  double t2301;
  double t2302;
  double t2303;
  double t2304;
  double t2314;
  double t2317;
  double t2319;
  double t2333;
  double t2334;
  double t2335;
  double t2329;
  double t2330;
  double t2331;
  double t2321;
  double t2233;
  double t2237;
  double t2238;
  double t2239;
  double t2307;
  double t2313;
  double t2315;
  double t2316;
  double t2318;
  double t2320;
  double t2322;
  double t2323;
  double t2324;
  double t2332;
  double t2336;
  double t2337;
  double t2338;
  double t2339;
  double t2340;
  double t2341;
  double t2342;
  double t2343;
  double t1569;
  double t1800;
  double t1807;
  double t1810;
  double t2356;
  double t2357;
  double t2358;
  double t2366;
  double t2367;
  double t2360;
  double t2361;
  double t2362;
  double t2363;
  double t2376;
  double t2377;
  double t2378;
  double t2379;
  double t2384;
  double t2385;
  double t2386;
  double t2387;
  double t2388;
  double t2395;
  double t2396;
  double t2397;
  double t2415;
  double t2416;
  double t2417;
  double t2399;
  double t2400;
  double t2401;
  double t2423;
  double t2424;
  double t2403;
  double t2404;
  double t2405;
  double t2434;
  double t2435;
  double t2436;
  double t2008;
  double t2016;
  double t2017;
  double t2018;
  double t2419;
  double t2425;
  double t2426;
  double t2427;
  double t2428;
  double t2429;
  double t2442;
  double t2443;
  double t2445;
  double t2446;
  double t2408;
  double t2409;
  double t2410;
  double t2411;
  double t2444;
  double t2447;
  double t2448;
  double t2453;
  double t2454;
  double t2455;
  double t2463;
  double t2464;
  double t2465;
  double t2470;
  double t2471;
  double t2105;
  double t2106;
  double t2107;
  double t2467;
  double t2477;
  double t2478;
  double t2479;
  double t2480;
  double t2481;
  double t2482;
  double t2485;
  double t2486;
  double t2487;
  double t2494;
  double t2495;
  double t2496;
  double t2514;
  double t2515;
  double t2516;
  double t2498;
  double t2499;
  double t2500;
  double t2522;
  double t2523;
  double t2502;
  double t2503;
  double t2504;
  double t2533;
  double t2534;
  double t2535;
  double t2289;
  double t2297;
  double t2298;
  double t2299;
  double t2518;
  double t2524;
  double t2525;
  double t2526;
  double t2527;
  double t2528;
  double t2541;
  double t2542;
  double t2543;
  double t2545;
  double t2507;
  double t2508;
  double t2509;
  double t2510;
  double t2544;
  double t2546;
  double t2547;
  double t2552;
  double t2553;
  double t2554;
  double t2352;
  double t2353;
  double t2354;
  double t1615;
  double t1641;
  double t1651;
  double t1868;
  double t1869;
  double t2392;
  double t2393;
  double t2584;
  double t2585;
  double t2586;
  double t2588;
  double t2589;
  double t2590;
  double t2575;
  double t2576;
  double t2577;
  double t2578;
  double t2669;
  double t2670;
  double t2671;
  double t2673;
  double t2674;
  double t2675;
  double t2676;
  double t2066;
  double t2067;
  double t2068;
  double t2459;
  double t2460;
  double t2461;
  double t2686;
  double t2687;
  double t2688;
  double t2689;
  double t2692;
  double t2693;
  double t2694;
  double t2695;
  double t2696;
  double t2679;
  double t2680;
  double t2681;
  double t2705;
  double t2706;
  double t2707;
  double t2152;
  double t2153;
  double t2491;
  double t2492;
  double t2724;
  double t2725;
  double t2726;
  double t2728;
  double t2729;
  double t2730;
  double t2715;
  double t2716;
  double t2717;
  double t2718;
  double t2810;
  double t2811;
  double t2812;
  double t2814;
  double t2815;
  double t2816;
  double t2817;
  double t2558;
  double t2559;
  double t2560;
  double t2347;
  double t2348;
  double t2349;
  double t2827;
  double t2828;
  double t2829;
  double t2830;
  double t2833;
  double t2834;
  double t2835;
  double t2836;
  double t2837;
  double t2820;
  double t2821;
  double t2822;
  double t2846;
  double t2847;
  double t2848;
  double t1757;
  double t1758;
  double t2359;
  double t2364;
  double t2857;
  double t2858;
  double t2859;
  double t2860;
  double t2624;
  double t2625;
  double t2627;
  double t1974;
  double t1997;
  double t1998;
  double t2422;
  double t2430;
  double t2431;
  double t2913;
  double t2914;
  double t2915;
  double t2917;
  double t2918;
  double t2919;
  double t2697;
  double t2698;
  double t2902;
  double t2907;
  double t1960;
  double t1970;
  double t1972;
  double t2414;
  double t2418;
  double t2420;
  double t2992;
  double t2993;
  double t2927;
  double t2928;
  double t2685;
  double t2690;
  double t2942;
  double t2944;
  double t2945;
  double t2949;
  double t2951;
  double t2952;
  double t2719;
  double t2720;
  double t2081;
  double t2083;
  double t2466;
  double t2468;
  double t3037;
  double t3038;
  double t2732;
  double t2733;
  double t2750;
  double t2751;
  double t2752;
  double t2736;
  double t2737;
  double t2738;
  double t3029;
  double t3030;
  double t3031;
  double t3032;
  double t2764;
  double t2765;
  double t2766;
  double t2767;
  double t2768;
  double t2769;
  double t2770;
  double t2771;
  double t2772;
  double t2773;
  double t2774;
  double t2775;
  double t2776;
  double t2777;
  double t2521;
  double t2529;
  double t2530;
  double t2255;
  double t2278;
  double t2279;
  double t3063;
  double t3064;
  double t3065;
  double t3067;
  double t3068;
  double t3069;
  double t2838;
  double t2839;
  double t2513;
  double t2517;
  double t2519;
  double t2242;
  double t2251;
  double t2253;
  double t3143;
  double t3144;
  double t3077;
  double t3078;
  double t2826;
  double t2831;
  double t3092;
  double t3094;
  double t3095;
  double t3099;
  double t3101;
  double t3102;
  t1618 = Sin(var1[2]);
  t1584 = Cos(var1[2]);
  t1669 = Cos(var1[3]);
  t1685 = Sin(var1[3]);
  t1679 = t1669*t1618;
  t1694 = -1.*t1584*t1685;
  t1699 = t1679 + t1694;
  t1711 = -1.*t1584*t1669;
  t1722 = -1.*t1618*t1685;
  t1727 = t1711 + t1722;
  t1746 = t1584*t1669;
  t1748 = t1618*t1685;
  t1749 = t1746 + t1748;
  t1768 = 1.38102*t1699*t1749;
  t1740 = -1.*t1669*t1618;
  t1741 = t1584*t1685;
  t1743 = t1740 + t1741;
  t1795 = 0.69051*t1699*t1743;
  t1796 = 0.69051*t1727*t1749;
  t1797 = Power(t1749,2);
  t1798 = 0.69051*t1797;
  t1745 = 0.0571880382*t1743;
  t1750 = 0.0007823478299999989*t1749;
  t1756 = t1745 + t1750;
  t1779 = 1.38102*t1743*t1749;
  t1781 = t1768 + t1779;
  t1801 = Power(t1743,2);
  t1802 = 0.69051*t1801;
  t1805 = t1795 + t1802 + t1796 + t1798;
  t1815 = -1.*t1669;
  t1816 = 1. + t1815;
  t1825 = -0.0695*t1816;
  t1826 = -0.15232*t1669;
  t1827 = 0.0011329999999999986*t1685;
  t1828 = t1825 + t1826 + t1827;
  t1817 = -0.0265*t1816;
  t1818 = -0.025367*t1669;
  t1819 = 0.08282*t1685;
  t1820 = t1817 + t1818 + t1819;
  t1700 = 0.0571880382*t1699;
  t1731 = 0.0007823478299999989*t1727;
  t1732 = t1700 + t1731;
  t1738 = -0.5*var2[3]*t1732;
  t1765 = 1.38102*t1699*t1727;
  t1772 = t1765 + t1768;
  t1786 = Power(t1699,2);
  t1791 = 0.69051*t1786;
  t1799 = t1791 + t1795 + t1796 + t1798;
  t1823 = -1.*t1669*t1820;
  t1830 = -1.*t1828*t1685;
  t1831 = t1823 + t1830;
  t1833 = t1669*t1828;
  t1834 = -1.*t1820*t1685;
  t1836 = t1833 + t1834;
  t1849 = 0.08282*t1669;
  t1850 = -0.0011329999999999986*t1685;
  t1851 = t1849 + t1850;
  t1846 = 0.0011329999999999986*t1669;
  t1847 = t1846 + t1819;
  t1832 = 0.69051*t1749*t1831;
  t1837 = 0.69051*t1743*t1836;
  t1838 = t1832 + t1837;
  t1839 = -0.5*var2[2]*t1838;
  t1845 = 0.69051*t1727*t1831;
  t1848 = t1669*t1847;
  t1852 = -1.*t1851*t1685;
  t1853 = t1823 + t1848 + t1852 + t1830;
  t1854 = 0.69051*t1749*t1853;
  t1855 = 0.69051*t1699*t1836;
  t1856 = -1.*t1669*t1851;
  t1857 = -1.*t1669*t1828;
  t1858 = t1820*t1685;
  t1859 = -1.*t1847*t1685;
  t1860 = t1856 + t1857 + t1858 + t1859;
  t1861 = 0.69051*t1699*t1860;
  t1862 = t1845 + t1854 + t1855 + t1861;
  t1871 = Cos(var1[4]);
  t1873 = Sin(var1[4]);
  t1879 = t1669*t1871;
  t1880 = -1.*t1685*t1873;
  t1881 = t1879 + t1880;
  t1895 = -1.*t1871;
  t1896 = 1. + t1895;
  t1872 = -1.*t1871*t1685;
  t1876 = -1.*t1669*t1873;
  t1877 = t1872 + t1876;
  t1878 = -1.*t1618*t1877;
  t1882 = t1584*t1881;
  t1883 = t1878 + t1882;
  t1903 = -0.2375*t1896;
  t1904 = -0.314514*t1871;
  t1905 = 0.0012709999999999978*t1873;
  t1906 = t1903 + t1904 + t1905;
  t1897 = -0.0265*t1896;
  t1898 = -0.025229*t1871;
  t1899 = 0.07701400000000003*t1873;
  t1900 = t1897 + t1898 + t1899;
  t1885 = t1871*t1685;
  t1886 = t1669*t1873;
  t1887 = t1885 + t1886;
  t1888 = t1584*t1887;
  t1889 = -1.*t1618*t1881;
  t1890 = t1888 + t1889;
  t1918 = t1618*t1887;
  t1919 = t1918 + t1882;
  t1921 = t1584*t1877;
  t1922 = t1618*t1881;
  t1923 = t1921 + t1922;
  t1945 = -0.0695*t1685;
  t1946 = -1.*t1685*t1906;
  t1947 = t1669*t1900;
  t1948 = t1817 + t1945 + t1946 + t1947;
  t1940 = 0.0265*t1685;
  t1941 = t1669*t1906;
  t1942 = t1685*t1900;
  t1943 = t1825 + t1940 + t1941 + t1942;
  t1884 = 0.0002537424399999996*t1883;
  t1891 = 0.015375074960000006*t1890;
  t1892 = t1884 + t1891;
  t1961 = 0.015375074960000006*t1923;
  t1962 = t1618*t1877;
  t1963 = -1.*t1669*t1871;
  t1964 = t1685*t1873;
  t1965 = t1963 + t1964;
  t1966 = t1584*t1965;
  t1967 = t1962 + t1966;
  t1968 = 0.0002537424399999996*t1967;
  t1969 = t1961 + t1968;
  t1894 = 0.0265*t1871;
  t1901 = t1871*t1900;
  t1902 = 0.0695*t1873;
  t1907 = t1906*t1873;
  t1908 = t1894 + t1901 + t1902 + t1907;
  t1909 = 0.19964*t1908*t1883;
  t1910 = -0.0695*t1871;
  t1911 = -1.*t1871*t1906;
  t1912 = 0.0265*t1873;
  t1913 = t1900*t1873;
  t1914 = t1910 + t1911 + t1912 + t1913;
  t1915 = 0.19964*t1914*t1890;
  t1916 = t1909 + t1915;
  t1975 = 0.19964*t1914*t1923;
  t1982 = 0.07701400000000003*t1871;
  t1983 = -0.0012709999999999978*t1873;
  t1984 = t1982 + t1983;
  t1979 = 0.0012709999999999978*t1871;
  t1980 = t1979 + t1899;
  t1976 = 0.19964*t1908*t1967;
  t1920 = 0.39928*t1919*t1890;
  t1924 = 0.39928*t1883*t1923;
  t1925 = t1920 + t1924;
  t2001 = 0.39928*t1919*t1923;
  t2002 = 0.39928*t1923*t1967;
  t2003 = t2001 + t2002;
  t1927 = Power(t1883,2);
  t1928 = 0.19964*t1927;
  t1929 = -1.*t1618*t1887;
  t1930 = -1.*t1584*t1881;
  t1931 = t1929 + t1930;
  t1932 = 0.19964*t1931*t1919;
  t1933 = Power(t1890,2);
  t1934 = 0.19964*t1933;
  t1935 = -1.*t1584*t1877;
  t1936 = t1935 + t1889;
  t1937 = 0.19964*t1936*t1923;
  t1938 = t1928 + t1932 + t1934 + t1937;
  t2009 = 0.19964*t1883*t1919;
  t2010 = 0.19964*t1890*t1923;
  t2011 = 0.19964*t1883*t1967;
  t2012 = -1.*t1618*t1965;
  t2013 = t1921 + t2012;
  t2014 = 0.19964*t1923*t2013;
  t2015 = t2009 + t2010 + t2011 + t2014;
  t1971 = -0.5*var2[4]*t1969;
  t1977 = t1975 + t1976;
  t1978 = -0.5*var2[3]*t1977;
  t1952 = t1948*t1877;
  t1953 = t1943*t1881;
  t1954 = t1952 + t1953;
  t1944 = -1.*t1943*t1887;
  t1949 = -1.*t1948*t1881;
  t1950 = t1944 + t1949;
  t2026 = -0.0695*t1669;
  t2027 = -0.0265*t1685;
  t2028 = -1.*t1669*t1906;
  t2029 = -1.*t1685*t1900;
  t2030 = t2026 + t2027 + t2028 + t2029;
  t2023 = 0.0265*t1669;
  t2024 = t2023 + t1945 + t1946 + t1947;
  t1981 = -1.*t1871*t1980;
  t1985 = t1984*t1873;
  t1986 = t1894 + t1901 + t1981 + t1902 + t1985 + t1907;
  t1987 = 0.19964*t1986*t1919;
  t1988 = 0.0695*t1871;
  t1989 = t1871*t1984;
  t1990 = t1871*t1906;
  t1991 = -0.0265*t1873;
  t1992 = -1.*t1900*t1873;
  t1993 = t1980*t1873;
  t1994 = t1988 + t1989 + t1990 + t1991 + t1992 + t1993;
  t1995 = 0.19964*t1994*t1923;
  t1996 = t1987 + t1975 + t1995 + t1976;
  t2020 = -0.5*var2[0]*t2003;
  t2021 = -0.5*var2[1]*t2015;
  t2035 = 0.19964*t1923*t1954;
  t2022 = -1.*t1948*t1877;
  t2032 = -1.*t1943*t1881;
  t2036 = 0.19964*t1950*t1967;
  t2038 = t1943*t1877;
  t2052 = t1669*t1984;
  t2053 = -1.*t1685*t1980;
  t2054 = t2052 + t2053;
  t2048 = t1685*t1984;
  t2049 = t1669*t1980;
  t2050 = t2048 + t2049;
  t2040 = t1948*t1965;
  t1951 = 0.19964*t1883*t1950;
  t1955 = 0.19964*t1890*t1954;
  t1956 = t1951 + t1955;
  t1957 = -0.5*var2[2]*t1956;
  t2025 = -1.*t2024*t1887;
  t2031 = -1.*t2030*t1881;
  t2033 = t2022 + t2025 + t2031 + t2032;
  t2034 = 0.19964*t1923*t2033;
  t2037 = t2030*t1877;
  t2039 = t2024*t1881;
  t2041 = t2037 + t2038 + t2039 + t2040;
  t2042 = 0.19964*t1919*t2041;
  t2043 = t2034 + t2035 + t2036 + t2042;
  t2051 = -1.*t2050*t1887;
  t2055 = -1.*t2054*t1881;
  t2056 = t2022 + t2051 + t2032 + t2055;
  t2057 = 0.19964*t1923*t2056;
  t2058 = t2054*t1877;
  t2059 = t2050*t1881;
  t2060 = t2038 + t2058 + t2059 + t2040;
  t2061 = 0.19964*t1919*t2060;
  t2062 = t2035 + t2057 + t2036 + t2061;
  t2070 = Cos(var1[5]);
  t2072 = Sin(var1[5]);
  t2071 = -1.*t2070*t1618;
  t2073 = -1.*t1584*t2072;
  t2074 = t2071 + t2073;
  t2075 = -0.0571880382*t2074;
  t2076 = t1584*t2070;
  t2077 = -1.*t1618*t2072;
  t2078 = t2076 + t2077;
  t2079 = -0.0007505843699999984*t2078;
  t2080 = t2075 + t2079;
  t2085 = 1.38102*t2074*t2078;
  t2086 = t2070*t1618;
  t2087 = t1584*t2072;
  t2088 = t2086 + t2087;
  t2089 = 1.38102*t2088*t2078;
  t2090 = t2085 + t2089;
  t2095 = Power(t2074,2);
  t2096 = 0.69051*t2095;
  t2097 = 0.69051*t2074*t2088;
  t2098 = Power(t2078,2);
  t2099 = 0.69051*t2098;
  t2100 = -1.*t1584*t2070;
  t2101 = t1618*t2072;
  t2102 = t2100 + t2101;
  t2103 = 0.69051*t2078*t2102;
  t2104 = t2096 + t2097 + t2099 + t2103;
  t2082 = -0.5*var2[5]*t2080;
  t2111 = -1.*t2070;
  t2112 = 1. + t2111;
  t2118 = -0.0265*t2112;
  t2119 = -0.025413*t2070;
  t2120 = -0.08282*t2072;
  t2121 = t2118 + t2119 + t2120;
  t2113 = -0.0695*t2112;
  t2114 = -0.15232*t2070;
  t2115 = -0.0010869999999999977*t2072;
  t2116 = t2113 + t2114 + t2115;
  t2109 = -0.5*var2[0]*t2090;
  t2110 = -0.5*var2[1]*t2104;
  t2117 = t2070*t2116;
  t2122 = t2121*t2072;
  t2123 = t2117 + t2122;
  t2124 = 0.69051*t2074*t2123;
  t2125 = -1.*t2070*t2121;
  t2126 = t2116*t2072;
  t2127 = t2125 + t2126;
  t2128 = 0.69051*t2078*t2127;
  t2139 = -0.08282*t2070;
  t2140 = t2139 + t2115;
  t2134 = -0.0010869999999999977*t2070;
  t2135 = 0.08282*t2072;
  t2136 = t2134 + t2135;
  t2129 = t2124 + t2128;
  t2130 = -0.5*var2[2]*t2129;
  t2133 = t2070*t2121;
  t2137 = t2070*t2136;
  t2138 = -1.*t2116*t2072;
  t2141 = t2140*t2072;
  t2142 = t2133 + t2137 + t2138 + t2141;
  t2143 = 0.69051*t2078*t2142;
  t2144 = -1.*t2070*t2140;
  t2145 = t2136*t2072;
  t2146 = t2117 + t2144 + t2122 + t2145;
  t2147 = 0.69051*t2088*t2146;
  t2148 = t2124 + t2128 + t2143 + t2147;
  t2155 = Cos(var1[6]);
  t2157 = Sin(var1[6]);
  t2161 = t2070*t2155;
  t2162 = -1.*t2072*t2157;
  t2163 = t2161 + t2162;
  t2177 = -1.*t2155;
  t2178 = 1. + t2177;
  t2156 = t2155*t2072;
  t2158 = t2070*t2157;
  t2159 = t2156 + t2158;
  t2160 = -1.*t1618*t2159;
  t2164 = t1584*t2163;
  t2165 = t2160 + t2164;
  t2185 = -0.2375*t2178;
  t2186 = -0.314506*t2155;
  t2187 = -0.0012740000000000008*t2157;
  t2188 = t2185 + t2186 + t2187;
  t2179 = -0.0265*t2178;
  t2180 = -0.025226*t2155;
  t2181 = -0.07700600000000002*t2157;
  t2182 = t2179 + t2180 + t2181;
  t2167 = -1.*t2155*t2072;
  t2168 = -1.*t2070*t2157;
  t2169 = t2167 + t2168;
  t2170 = t1584*t2169;
  t2171 = -1.*t1618*t2163;
  t2172 = t2170 + t2171;
  t2200 = t1618*t2169;
  t2201 = t2200 + t2164;
  t2203 = t1584*t2159;
  t2204 = t1618*t2163;
  t2205 = t2203 + t2204;
  t2227 = -0.0265*t2072;
  t2228 = -1.*t2072*t2182;
  t2229 = t2070*t2188;
  t2230 = t2113 + t2227 + t2228 + t2229;
  t2222 = 0.0695*t2072;
  t2223 = t2070*t2182;
  t2224 = t2072*t2188;
  t2225 = t2118 + t2222 + t2223 + t2224;
  t2166 = -0.0002543413600000002*t2165;
  t2173 = -0.015373477840000005*t2172;
  t2174 = t2166 + t2173;
  t2243 = -0.0002543413600000002*t2201;
  t2244 = -1.*t2070*t2155;
  t2245 = t2072*t2157;
  t2246 = t2244 + t2245;
  t2247 = t1618*t2246;
  t2248 = t2170 + t2247;
  t2249 = -0.015373477840000005*t2248;
  t2250 = t2243 + t2249;
  t2176 = -0.0265*t2155;
  t2183 = -1.*t2155*t2182;
  t2184 = 0.0695*t2157;
  t2189 = t2188*t2157;
  t2190 = t2176 + t2183 + t2184 + t2189;
  t2191 = 0.19964*t2190*t2165;
  t2192 = 0.0695*t2155;
  t2193 = t2155*t2188;
  t2194 = 0.0265*t2157;
  t2195 = t2182*t2157;
  t2196 = t2192 + t2193 + t2194 + t2195;
  t2197 = 0.19964*t2196*t2172;
  t2198 = t2191 + t2197;
  t2256 = 0.19964*t2190*t2201;
  t2268 = -0.07700600000000002*t2155;
  t2269 = t2268 + t2187;
  t2262 = -0.0012740000000000008*t2155;
  t2263 = 0.07700600000000002*t2157;
  t2264 = t2262 + t2263;
  t2257 = 0.19964*t2196*t2248;
  t2202 = 0.39928*t2201*t2172;
  t2206 = 0.39928*t2165*t2205;
  t2207 = t2202 + t2206;
  t2282 = 0.39928*t2201*t2205;
  t2283 = 0.39928*t2201*t2248;
  t2284 = t2282 + t2283;
  t2209 = -1.*t1618*t2169;
  t2210 = -1.*t1584*t2163;
  t2211 = t2209 + t2210;
  t2212 = 0.19964*t2211*t2201;
  t2213 = Power(t2165,2);
  t2214 = 0.19964*t2213;
  t2215 = Power(t2172,2);
  t2216 = 0.19964*t2215;
  t2217 = -1.*t1584*t2159;
  t2218 = t2217 + t2171;
  t2219 = 0.19964*t2218*t2205;
  t2220 = t2212 + t2214 + t2216 + t2219;
  t2290 = 0.19964*t2201*t2165;
  t2291 = 0.19964*t2172*t2205;
  t2292 = t1584*t2246;
  t2293 = t2209 + t2292;
  t2294 = 0.19964*t2201*t2293;
  t2295 = 0.19964*t2172*t2248;
  t2296 = t2290 + t2291 + t2294 + t2295;
  t2252 = -0.5*var2[6]*t2250;
  t2258 = t2256 + t2257;
  t2259 = -0.5*var2[5]*t2258;
  t2234 = -1.*t2230*t2169;
  t2235 = -1.*t2225*t2163;
  t2236 = t2234 + t2235;
  t2226 = t2225*t2159;
  t2231 = t2230*t2163;
  t2232 = t2226 + t2231;
  t2308 = -0.0265*t2070;
  t2309 = -0.0695*t2072;
  t2310 = -1.*t2070*t2182;
  t2311 = -1.*t2072*t2188;
  t2312 = t2308 + t2309 + t2310 + t2311;
  t2305 = 0.0695*t2070;
  t2306 = t2305 + t2227 + t2228 + t2229;
  t2260 = 0.0265*t2155;
  t2261 = t2155*t2182;
  t2265 = t2155*t2264;
  t2266 = -0.0695*t2157;
  t2267 = -1.*t2188*t2157;
  t2270 = t2269*t2157;
  t2271 = t2260 + t2261 + t2265 + t2266 + t2267 + t2270;
  t2272 = 0.19964*t2271*t2201;
  t2273 = -1.*t2155*t2269;
  t2274 = t2264*t2157;
  t2275 = t2192 + t2193 + t2273 + t2194 + t2195 + t2274;
  t2276 = 0.19964*t2275*t2205;
  t2277 = t2256 + t2272 + t2276 + t2257;
  t2301 = -0.5*var2[0]*t2284;
  t2302 = -0.5*var2[1]*t2296;
  t2303 = 0.19964*t2201*t2236;
  t2304 = t2230*t2169;
  t2314 = t2225*t2163;
  t2317 = 0.19964*t2232*t2248;
  t2319 = -1.*t2225*t2169;
  t2333 = -1.*t2072*t2269;
  t2334 = t2070*t2264;
  t2335 = t2333 + t2334;
  t2329 = t2070*t2269;
  t2330 = t2072*t2264;
  t2331 = t2329 + t2330;
  t2321 = -1.*t2230*t2246;
  t2233 = 0.19964*t2172*t2232;
  t2237 = 0.19964*t2165*t2236;
  t2238 = t2233 + t2237;
  t2239 = -0.5*var2[2]*t2238;
  t2307 = t2306*t2159;
  t2313 = t2312*t2163;
  t2315 = t2304 + t2307 + t2313 + t2314;
  t2316 = 0.19964*t2201*t2315;
  t2318 = -1.*t2312*t2169;
  t2320 = -1.*t2306*t2163;
  t2322 = t2318 + t2319 + t2320 + t2321;
  t2323 = 0.19964*t2205*t2322;
  t2324 = t2303 + t2316 + t2317 + t2323;
  t2332 = t2331*t2159;
  t2336 = t2335*t2163;
  t2337 = t2304 + t2332 + t2314 + t2336;
  t2338 = 0.19964*t2201*t2337;
  t2339 = -1.*t2335*t2169;
  t2340 = -1.*t2331*t2163;
  t2341 = t2319 + t2339 + t2340 + t2321;
  t2342 = 0.19964*t2205*t2341;
  t2343 = t2303 + t2338 + t2317 + t2342;
  t1569 = Power(var2[2],2);
  t1800 = -0.5*var2[3]*t1799;
  t1807 = -0.5*var2[2]*t1805;
  t1810 = t1800 + t1807;
  t2356 = 0.0007823478299999989*t1743;
  t2357 = 0.0571880382*t1727;
  t2358 = t2356 + t2357;
  t2366 = 1.38102*t1743*t1727;
  t2367 = t2366 + t1779;
  t2360 = 0.0007823478299999989*t1699;
  t2361 = 0.0571880382*t1749;
  t2362 = t2360 + t2361;
  t2363 = -0.5*var2[3]*t2362;
  t2376 = 0.69051*t1743*t1831;
  t2377 = 0.69051*t1727*t1836;
  t2378 = t2376 + t2377;
  t2379 = -0.5*var2[2]*t2378;
  t2384 = 0.69051*t1699*t1831;
  t2385 = 0.69051*t1743*t1853;
  t2386 = 0.69051*t1749*t1836;
  t2387 = 0.69051*t1749*t1860;
  t2388 = t2384 + t2385 + t2386 + t2387;
  t2395 = 0.015375074960000006*t1931;
  t2396 = 0.0002537424399999996*t1936;
  t2397 = t2395 + t2396;
  t2415 = 0.015375074960000006*t1883;
  t2416 = 0.0002537424399999996*t2013;
  t2417 = t2415 + t2416;
  t2399 = 0.19964*t1914*t1931;
  t2400 = 0.19964*t1908*t1936;
  t2401 = t2399 + t2400;
  t2423 = 0.19964*t1914*t1883;
  t2424 = 0.19964*t1908*t2013;
  t2403 = 0.39928*t1883*t1936;
  t2404 = 0.39928*t1931*t1890;
  t2405 = t2403 + t2404;
  t2434 = 0.39928*t1883*t1890;
  t2435 = 0.39928*t1883*t2013;
  t2436 = t2434 + t2435;
  t2008 = -0.5*var2[2]*t1938;
  t2016 = -0.5*var2[3]*t2015;
  t2017 = -0.5*var2[4]*t2015;
  t2018 = t2008 + t2016 + t2017;
  t2419 = -0.5*var2[4]*t2417;
  t2425 = t2423 + t2424;
  t2426 = -0.5*var2[3]*t2425;
  t2427 = 0.19964*t1994*t1883;
  t2428 = 0.19964*t1986*t1890;
  t2429 = t2423 + t2427 + t2428 + t2424;
  t2442 = -0.5*var2[1]*t2436;
  t2443 = -0.5*var2[0]*t2015;
  t2445 = 0.19964*t1883*t1954;
  t2446 = 0.19964*t1950*t2013;
  t2408 = 0.19964*t1936*t1950;
  t2409 = 0.19964*t1931*t1954;
  t2410 = t2408 + t2409;
  t2411 = -0.5*var2[2]*t2410;
  t2444 = 0.19964*t1883*t2033;
  t2447 = 0.19964*t1890*t2041;
  t2448 = t2444 + t2445 + t2446 + t2447;
  t2453 = 0.19964*t1883*t2056;
  t2454 = 0.19964*t1890*t2060;
  t2455 = t2445 + t2453 + t2446 + t2454;
  t2463 = -0.0007505843699999984*t2074;
  t2464 = -0.0571880382*t2102;
  t2465 = t2463 + t2464;
  t2470 = 1.38102*t2074*t2102;
  t2471 = t2085 + t2470;
  t2105 = -0.5*var2[2]*t2104;
  t2106 = -0.5*var2[5]*t2104;
  t2107 = t2105 + t2106;
  t2467 = -0.5*var2[5]*t2465;
  t2477 = -0.5*var2[1]*t2471;
  t2478 = -0.5*var2[0]*t2104;
  t2479 = 0.69051*t2102*t2123;
  t2480 = 0.69051*t2074*t2127;
  t2481 = t2479 + t2480;
  t2482 = -0.5*var2[2]*t2481;
  t2485 = 0.69051*t2074*t2142;
  t2486 = 0.69051*t2078*t2146;
  t2487 = t2479 + t2480 + t2485 + t2486;
  t2494 = -0.015373477840000005*t2211;
  t2495 = -0.0002543413600000002*t2218;
  t2496 = t2494 + t2495;
  t2514 = -0.0002543413600000002*t2172;
  t2515 = -0.015373477840000005*t2293;
  t2516 = t2514 + t2515;
  t2498 = 0.19964*t2196*t2211;
  t2499 = 0.19964*t2190*t2218;
  t2500 = t2498 + t2499;
  t2522 = 0.19964*t2190*t2172;
  t2523 = 0.19964*t2196*t2293;
  t2502 = 0.39928*t2211*t2172;
  t2503 = 0.39928*t2165*t2218;
  t2504 = t2502 + t2503;
  t2533 = 0.39928*t2165*t2172;
  t2534 = 0.39928*t2172*t2293;
  t2535 = t2533 + t2534;
  t2289 = -0.5*var2[2]*t2220;
  t2297 = -0.5*var2[5]*t2296;
  t2298 = -0.5*var2[6]*t2296;
  t2299 = t2289 + t2297 + t2298;
  t2518 = -0.5*var2[6]*t2516;
  t2524 = t2522 + t2523;
  t2525 = -0.5*var2[5]*t2524;
  t2526 = 0.19964*t2275*t2165;
  t2527 = 0.19964*t2271*t2172;
  t2528 = t2526 + t2522 + t2527 + t2523;
  t2541 = -0.5*var2[1]*t2535;
  t2542 = -0.5*var2[0]*t2296;
  t2543 = 0.19964*t2172*t2236;
  t2545 = 0.19964*t2232*t2293;
  t2507 = 0.19964*t2211*t2232;
  t2508 = 0.19964*t2218*t2236;
  t2509 = t2507 + t2508;
  t2510 = -0.5*var2[2]*t2509;
  t2544 = 0.19964*t2172*t2315;
  t2546 = 0.19964*t2165*t2322;
  t2547 = t2543 + t2544 + t2545 + t2546;
  t2552 = 0.19964*t2172*t2337;
  t2553 = 0.19964*t2165*t2341;
  t2554 = t2543 + t2552 + t2545 + t2553;
  t2352 = 0.0725204374*t1584;
  t2353 = -0.0411891926*t1618;
  t2354 = t2352 + t2353;
  t1615 = 0.0411891926*t1584;
  t1641 = 0.0725204374*t1618;
  t1651 = t1615 + t1641;
  t1868 = -0.5*var2[3]*t1862;
  t1869 = t1839 + t1868;
  t2392 = -0.5*var2[3]*t2388;
  t2393 = t2379 + t2392;
  t2584 = 0.0571880382*t1853;
  t2585 = 0.0007823478299999989*t1860;
  t2586 = t2584 + t2585;
  t2588 = 1.38102*t1853*t1836;
  t2589 = 1.38102*t1831*t1860;
  t2590 = t2588 + t2589;
  t2575 = t1817 + t1945;
  t2576 = -1.*t1584*t2575;
  t2577 = t1825 + t1940;
  t2578 = -1.*t1618*t2577;
  t2669 = 0.0002537424399999996*t2033;
  t2670 = 0.015375074960000006*t2041;
  t2671 = t2669 + t2670;
  t2673 = 0.19964*t1908*t2033;
  t2674 = 0.19964*t1914*t2041;
  t2675 = t2673 + t2674;
  t2676 = -0.5*var2[3]*t2675;
  t2066 = -0.5*var2[3]*t2043;
  t2067 = -0.5*var2[4]*t2062;
  t2068 = t1957 + t2066 + t2067;
  t2459 = -0.5*var2[3]*t2448;
  t2460 = -0.5*var2[4]*t2455;
  t2461 = t2411 + t2459 + t2460;
  t2686 = 0.0002537424399999996*t2056;
  t2687 = 0.015375074960000006*t2060;
  t2688 = t2686 + t2687;
  t2689 = -0.5*var2[4]*t2688;
  t2692 = 0.19964*t1994*t1950;
  t2693 = 0.19964*t1986*t1954;
  t2694 = 0.19964*t1908*t2056;
  t2695 = 0.19964*t1914*t2060;
  t2696 = t2692 + t2693 + t2694 + t2695;
  t2679 = 0.39928*t1950*t2033;
  t2680 = 0.39928*t1954*t2041;
  t2681 = t2679 + t2680;
  t2705 = 0.39928*t1950*t2056;
  t2706 = 0.39928*t1954*t2060;
  t2707 = t2705 + t2706;
  t2152 = -0.5*var2[5]*t2148;
  t2153 = t2130 + t2152;
  t2491 = -0.5*var2[5]*t2487;
  t2492 = t2482 + t2491;
  t2724 = -0.0571880382*t2142;
  t2725 = -0.0007505843699999984*t2146;
  t2726 = t2724 + t2725;
  t2728 = 1.38102*t2123*t2142;
  t2729 = 1.38102*t2127*t2146;
  t2730 = t2728 + t2729;
  t2715 = t2113 + t2227;
  t2716 = -1.*t1618*t2715;
  t2717 = t2118 + t2222;
  t2718 = -1.*t1584*t2717;
  t2810 = -0.015373477840000005*t2315;
  t2811 = -0.0002543413600000002*t2322;
  t2812 = t2810 + t2811;
  t2814 = 0.19964*t2196*t2315;
  t2815 = 0.19964*t2190*t2322;
  t2816 = t2814 + t2815;
  t2817 = -0.5*var2[5]*t2816;
  t2558 = -0.5*var2[5]*t2547;
  t2559 = -0.5*var2[6]*t2554;
  t2560 = t2510 + t2558 + t2559;
  t2347 = -0.5*var2[5]*t2324;
  t2348 = -0.5*var2[6]*t2343;
  t2349 = t2239 + t2347 + t2348;
  t2827 = -0.015373477840000005*t2337;
  t2828 = -0.0002543413600000002*t2341;
  t2829 = t2827 + t2828;
  t2830 = -0.5*var2[6]*t2829;
  t2833 = 0.19964*t2271*t2232;
  t2834 = 0.19964*t2275*t2236;
  t2835 = 0.19964*t2196*t2337;
  t2836 = 0.19964*t2190*t2341;
  t2837 = t2833 + t2834 + t2835 + t2836;
  t2820 = 0.39928*t2232*t2315;
  t2821 = 0.39928*t2236*t2322;
  t2822 = t2820 + t2821;
  t2846 = 0.39928*t2232*t2337;
  t2847 = 0.39928*t2236*t2341;
  t2848 = t2846 + t2847;
  t1757 = -0.5*var2[2]*t1756;
  t1758 = t1738 + t1757;
  t2359 = -0.5*var2[2]*t2358;
  t2364 = t2359 + t2363;
  t2857 = t2023 + t1945;
  t2858 = t1584*t2857;
  t2859 = t2026 + t2027;
  t2860 = -1.*t1618*t2859;
  t2624 = -0.2375*t1873;
  t2625 = t1897 + t2624;
  t2627 = t1903 + t1912;
  t1974 = -0.5*var2[2]*t1916;
  t1997 = -0.5*var2[4]*t1996;
  t1998 = t1974 + t1978 + t1997;
  t2422 = -0.5*var2[2]*t2401;
  t2430 = -0.5*var2[4]*t2429;
  t2431 = t2422 + t2426 + t2430;
  t2913 = 0.015375074960000006*t1986;
  t2914 = 0.0002537424399999996*t1994;
  t2915 = t2913 + t2914;
  t2917 = 0.39928*t1986*t1914;
  t2918 = 0.39928*t1908*t1994;
  t2919 = t2917 + t2918;
  t2697 = -0.5*var2[4]*t2696;
  t2698 = t2676 + t2697;
  t2902 = t1871*t1749;
  t2907 = -1.*t1749*t1873;
  t1960 = -0.5*var2[2]*t1892;
  t1970 = -0.5*var2[3]*t1969;
  t1972 = t1960 + t1970 + t1971;
  t2414 = -0.5*var2[2]*t2397;
  t2418 = -0.5*var2[3]*t2417;
  t2420 = t2414 + t2418 + t2419;
  t2992 = -0.5*var2[0]*t1969;
  t2993 = -0.5*var2[1]*t2417;
  t2927 = 0.5*var2[0]*t1969;
  t2928 = 0.5*var2[1]*t2417;
  t2685 = -0.5*var2[3]*t2671;
  t2690 = t2685 + t2689;
  t2942 = 0.5*var2[4]*t1969;
  t2944 = 0.5*var2[0]*t2003;
  t2945 = 0.5*var2[1]*t2015;
  t2949 = 0.5*var2[4]*t2417;
  t2951 = 0.5*var2[1]*t2436;
  t2952 = 0.5*var2[0]*t2015;
  t2719 = -0.15232*t2074;
  t2720 = -0.025413*t2102;
  t2081 = -0.5*var2[2]*t2080;
  t2083 = t2081 + t2082;
  t2466 = -0.5*var2[2]*t2465;
  t2468 = t2466 + t2467;
  t3037 = -0.5*var2[0]*t2080;
  t3038 = -0.5*var2[1]*t2465;
  t2732 = 0.5*var2[0]*t2080;
  t2733 = 0.5*var2[1]*t2465;
  t2750 = 0.5*var2[5]*t2080;
  t2751 = 0.5*var2[0]*t2090;
  t2752 = 0.5*var2[1]*t2104;
  t2736 = 0.5*var2[5]*t2465;
  t2737 = 0.5*var2[1]*t2471;
  t2738 = 0.5*var2[0]*t2104;
  t3029 = t2308 + t2309;
  t3030 = t1584*t3029;
  t3031 = t2305 + t2227;
  t3032 = -1.*t1618*t3031;
  t2764 = -0.0265*t2157;
  t2765 = t2185 + t2764;
  t2766 = t2074*t2765;
  t2767 = 0.2375*t2157;
  t2768 = t2179 + t2767;
  t2769 = t2102*t2768;
  t2770 = t2155*t2102;
  t2771 = -1.*t2074*t2157;
  t2772 = t2770 + t2771;
  t2773 = -0.025226*t2772;
  t2774 = t2155*t2074;
  t2775 = t2102*t2157;
  t2776 = t2774 + t2775;
  t2777 = -0.314506*t2776;
  t2521 = -0.5*var2[2]*t2500;
  t2529 = -0.5*var2[6]*t2528;
  t2530 = t2521 + t2525 + t2529;
  t2255 = -0.5*var2[2]*t2198;
  t2278 = -0.5*var2[6]*t2277;
  t2279 = t2255 + t2259 + t2278;
  t3063 = -0.015373477840000005*t2271;
  t3064 = -0.0002543413600000002*t2275;
  t3065 = t3063 + t3064;
  t3067 = 0.39928*t2196*t2271;
  t3068 = 0.39928*t2190*t2275;
  t3069 = t3067 + t3068;
  t2838 = -0.5*var2[6]*t2837;
  t2839 = t2817 + t2838;
  t2513 = -0.5*var2[2]*t2496;
  t2517 = -0.5*var2[5]*t2516;
  t2519 = t2513 + t2517 + t2518;
  t2242 = -0.5*var2[2]*t2174;
  t2251 = -0.5*var2[5]*t2250;
  t2253 = t2242 + t2251 + t2252;
  t3143 = -0.5*var2[1]*t2516;
  t3144 = -0.5*var2[0]*t2250;
  t3077 = 0.5*var2[1]*t2516;
  t3078 = 0.5*var2[0]*t2250;
  t2826 = -0.5*var2[5]*t2812;
  t2831 = t2826 + t2830;
  t3092 = 0.5*var2[6]*t2516;
  t3094 = 0.5*var2[1]*t2535;
  t3095 = 0.5*var2[0]*t2296;
  t3099 = 0.5*var2[6]*t2250;
  t3101 = 0.5*var2[0]*t2284;
  t3102 = 0.5*var2[1]*t2296;
  p_output1[0]=-1.*t1569*t1651 + t1810*var2[1] + t2018*var2[1] + t2107*var2[1] + t2299*var2[1] + t1869*var2[2] + t2068*var2[2] + (t2082 + t2109 + t2110 + t2130)*var2[2] + t2153*var2[2] + t2349*var2[2] + t1758*var2[3] + t1998*var2[3] + (t1738 - 0.5*t1772*var2[0] - 0.5*t1799*var2[1] - 0.5*t1862*var2[2])*var2[3] + (t1971 + t1978 + t2020 + t2021 - 0.5*t2043*var2[2])*var2[3] + var2[2]*(t1839 - 0.5*t1781*var2[0] - 0.5*t1805*var2[1] - 0.5*t1756*var2[3]) + var2[0]*(-0.5*t1781*var2[2] - 0.5*t1772*var2[3]) + t1972*var2[4] + (t1971 + t2020 + t2021 - 0.5*t2062*var2[2] - 0.5*t1996*var2[3])*var2[4] + var2[2]*(t1957 - 0.5*t1925*var2[0] - 0.5*t1938*var2[1] - 0.5*t1916*var2[3] - 0.5*t1892*var2[4]) + var2[0]*(-0.5*t1925*var2[2] - 0.5*t2003*var2[3] - 0.5*t2003*var2[4]) + t2083*var2[5] + t2279*var2[5] + (t2082 + t2109 + t2110 - 0.5*t2148*var2[2])*var2[5] + (t2252 + t2259 + t2301 + t2302 - 0.5*t2324*var2[2])*var2[5] + var2[0]*(-0.5*t2090*var2[2] - 0.5*t2090*var2[5]) + t2253*var2[6] + (t2252 + t2301 + t2302 - 0.5*t2343*var2[2] - 0.5*t2277*var2[5])*var2[6] + var2[2]*(t2239 - 0.5*t2207*var2[0] - 0.5*t2220*var2[1] - 0.5*t2198*var2[5] - 0.5*t2174*var2[6]) + var2[0]*(-0.5*t2207*var2[2] - 0.5*t2284*var2[5] - 0.5*t2284*var2[6]);
  p_output1[1]=-32.734989 - 1.*t1569*t2354 + t1810*var2[0] + t2018*var2[0] + t2107*var2[0] + t2299*var2[0] + t2393*var2[2] + t2461*var2[2] + (t2467 + t2477 + t2478 + t2482)*var2[2] + t2492*var2[2] + t2560*var2[2] + t2364*var2[3] + t2431*var2[3] + (t2363 - 0.5*t1799*var2[0] - 0.5*t1781*var2[1] - 0.5*t2388*var2[2])*var2[3] + (t2419 + t2426 + t2442 + t2443 - 0.5*t2448*var2[2])*var2[3] + var2[1]*(-0.5*t2367*var2[2] - 0.5*t1781*var2[3]) + var2[2]*(t2379 - 0.5*t1805*var2[0] - 0.5*t2367*var2[1] - 0.5*t2358*var2[3]) + t2420*var2[4] + (t2419 + t2442 + t2443 - 0.5*t2455*var2[2] - 0.5*t2429*var2[3])*var2[4] + var2[2]*(t2411 - 0.5*t1938*var2[0] - 0.5*t2405*var2[1] - 0.5*t2401*var2[3] - 0.5*t2397*var2[4]) + var2[1]*(-0.5*t2405*var2[2] - 0.5*t2436*var2[3] - 0.5*t2436*var2[4]) + t2468*var2[5] + t2530*var2[5] + (t2467 + t2477 + t2478 - 0.5*t2487*var2[2])*var2[5] + (t2518 + t2525 + t2541 + t2542 - 0.5*t2547*var2[2])*var2[5] + var2[1]*(-0.5*t2471*var2[2] - 0.5*t2471*var2[5]) + t2519*var2[6] + (t2518 + t2541 + t2542 - 0.5*t2554*var2[2] - 0.5*t2528*var2[5])*var2[6] + var2[2]*(t2510 - 0.5*t2220*var2[0] - 0.5*t2504*var2[1] - 0.5*t2500*var2[5] - 0.5*t2496*var2[6]) + var2[1]*(-0.5*t2504*var2[2] - 0.5*t2535*var2[5] - 0.5*t2535*var2[6]);
  p_output1[2]=-15.270246*(0.026461*t1584 + 0.046589*t1618) - 6.7739031*(-0.025367*t1727 - 0.15232*t1743 + t2576 + t2578) - 1.9584684*(-0.314514*(t1743*t1871 - 1.*t1727*t1873) - 0.025229*(t1727*t1871 + t1743*t1873) + t2576 + t2578 + t1727*t2625 + t1743*t2627) - 6.7739031*(t2716 + t2718 + t2719 + t2720) - 1.9584684*(t2716 + t2718 + t2766 + t2769 + t2773 + t2777) + t1869*var2[0] + t2068*var2[0] + t2153*var2[0] + t2349*var2[0] + t2393*var2[1] + t2461*var2[1] + t2492*var2[1] + t2560*var2[1] + (-0.5*t1651*var2[0] - 0.5*t2354*var2[1])*var2[2] + (0.5*t1651*var2[0] + 0.5*t2354*var2[1])*var2[2] + (-0.5*t1838*var2[0] - 0.5*t2378*var2[1])*var2[2] + (0.5*t1838*var2[0] + 0.5*t2378*var2[1])*var2[2] + (-0.5*t1956*var2[0] - 0.5*t2410*var2[1])*var2[2] + (0.5*t1956*var2[0] + 0.5*t2410*var2[1])*var2[2] + (-0.5*t2129*var2[0] - 0.5*t2481*var2[1])*var2[2] + (0.5*t2129*var2[0] + 0.5*t2481*var2[1])*var2[2] + (-0.5*t2238*var2[0] - 0.5*t2509*var2[1])*var2[2] + (0.5*t2238*var2[0] + 0.5*t2509*var2[1])*var2[2] + var2[0]*(t2750 + t2751 + t2752 + 0.5*t2129*var2[2]) + var2[1]*(t2736 + t2737 + t2738 + 0.5*t2481*var2[2]) + t2698*var2[3] + (0.5*t1756*var2[0] + 0.5*t2358*var2[1])*var2[3] + (0.5*t1916*var2[0] + 0.5*t2401*var2[1])*var2[3] - 0.5*t2590*var2[2]*var2[3] - 0.5*t2586*Power(var2[3],2) + var2[0]*(0.5*t1781*var2[0] + 0.5*t1805*var2[1] + 0.5*t1838*var2[2] + 0.5*t1756*var2[3]) + var2[1]*(0.5*t1805*var2[0] + 0.5*t2367*var2[1] + 0.5*t2378*var2[2] + 0.5*t2358*var2[3]) + var2[3]*(-0.5*t1862*var2[0] - 0.5*t2388*var2[1] - 0.5*t2590*var2[2] - 0.5*t2586*var2[3]) + t2690*var2[4] + (0.5*t1892*var2[0] + 0.5*t2397*var2[1])*var2[4] + (t2689 - 0.5*t2062*var2[0] - 0.5*t2455*var2[1] - 0.5*t2707*var2[2] - 0.5*t2696*var2[3])*var2[4] + var2[0]*(0.5*t1925*var2[0] + 0.5*t1938*var2[1] + 0.5*t1956*var2[2] + 0.5*t1916*var2[3] + 0.5*t1892*var2[4]) + var2[1]*(0.5*t1938*var2[0] + 0.5*t2405*var2[1] + 0.5*t2410*var2[2] + 0.5*t2401*var2[3] + 0.5*t2397*var2[4]) + var2[3]*(t2676 - 0.5*t2043*var2[0] - 0.5*t2448*var2[1] - 0.5*t2681*var2[2] - 0.5*t2671*var2[4]) + var2[2]*(-0.5*t2681*var2[3] - 0.5*t2707*var2[4]) + (t2732 + t2733)*var2[5] + t2839*var2[5] + (0.5*t2198*var2[0] + 0.5*t2500*var2[1])*var2[5] - 0.5*t2730*var2[2]*var2[5] - 0.5*t2726*Power(var2[5],2) + var2[5]*(-0.5*t2148*var2[0] - 0.5*t2487*var2[1] - 0.5*t2730*var2[2] - 0.5*t2726*var2[5]) + t2831*var2[6] + (0.5*t2174*var2[0] + 0.5*t2496*var2[1])*var2[6] + (t2830 - 0.5*t2343*var2[0] - 0.5*t2554*var2[1] - 0.5*t2848*var2[2] - 0.5*t2837*var2[5])*var2[6] + var2[0]*(0.5*t2207*var2[0] + 0.5*t2220*var2[1] + 0.5*t2238*var2[2] + 0.5*t2198*var2[5] + 0.5*t2174*var2[6]) + var2[1]*(0.5*t2220*var2[0] + 0.5*t2504*var2[1] + 0.5*t2509*var2[2] + 0.5*t2500*var2[5] + 0.5*t2496*var2[6]) + var2[5]*(t2817 - 0.5*t2324*var2[0] - 0.5*t2547*var2[1] - 0.5*t2822*var2[2] - 0.5*t2812*var2[6]) + var2[2]*(-0.5*t2822*var2[5] - 0.5*t2848*var2[6]);
  p_output1[3]=-6.7739031*(-0.15232*t1699 - 0.025367*t1749 + t2858 + t2860) - 1.9584684*(t1749*t2625 + t1699*t2627 + t2858 + t2860 - 0.025229*(t1699*t1873 + t2902) - 0.314514*(t1699*t1871 + t2907)) + t1758*var2[0] + t1998*var2[0] + t2364*var2[1] + t2431*var2[1] + t2698*var2[2] + (-0.5*t1756*var2[0] - 0.5*t2358*var2[1])*var2[2] + (-0.5*t1916*var2[0] - 0.5*t2401*var2[1])*var2[2] - 0.5*t2586*var2[2]*var2[3] + (-0.5*t1732*var2[0] - 0.5*t2362*var2[1] - 0.5*t2586*var2[2])*var2[3] + (0.5*t1732*var2[0] + 0.5*t2362*var2[1] + 0.5*t2586*var2[2])*var2[3] + (-0.5*t1977*var2[0] - 0.5*t2425*var2[1] - 0.5*t2675*var2[2])*var2[3] + (0.5*t1977*var2[0] + 0.5*t2425*var2[1] + 0.5*t2675*var2[2])*var2[3] + var2[0]*(0.5*t1772*var2[0] + 0.5*t1799*var2[1] + 0.5*t1862*var2[2] + 0.5*t1732*var2[3]) + var2[0]*(t2942 + t2944 + t2945 + 0.5*t2043*var2[2] + 0.5*t1977*var2[3]) + var2[1]*(0.5*t1799*var2[0] + 0.5*t1781*var2[1] + 0.5*t2388*var2[2] + 0.5*t2362*var2[3]) + var2[1]*(t2949 + t2951 + t2952 + 0.5*t2448*var2[2] + 0.5*t2425*var2[3]) + var2[2]*(0.5*t1862*var2[0] + 0.5*t2388*var2[1] + 0.5*t2590*var2[2] + 0.5*t2586*var2[3]) + (t2927 + t2928 + 0.5*t2671*var2[2])*var2[4] - 0.5*t2919*var2[3]*var2[4] - 0.5*t2915*Power(var2[4],2) + var2[2]*(0.5*t2043*var2[0] + 0.5*t2448*var2[1] + 0.5*t2681*var2[2] + 0.5*t2675*var2[3] + 0.5*t2671*var2[4]) + var2[4]*(-0.5*t1996*var2[0] - 0.5*t2429*var2[1] - 0.5*t2696*var2[2] - 0.5*t2919*var2[3] - 0.5*t2915*var2[4]);
  p_output1[4]=-1.9584684*(t1743*(-0.2375*t1871 + t1991) + t1749*(t1894 + t2624) - 0.025229*(-1.*t1743*t1873 + t2902) - 0.314514*(-1.*t1743*t1871 + t2907)) + t1972*var2[0] + t2420*var2[1] + t2690*var2[2] + (-0.5*t1892*var2[0] - 0.5*t2397*var2[1])*var2[2] + (t2992 + t2993 - 0.5*t2671*var2[2])*var2[3] + var2[0]*(t2942 + t2944 + t2945 + 0.5*t2062*var2[2] + 0.5*t1996*var2[3]) + var2[1]*(t2949 + t2951 + t2952 + 0.5*t2455*var2[2] + 0.5*t2429*var2[3]) - 0.5*t2915*var2[3]*var2[4] + (t2992 + t2993 - 0.5*t2688*var2[2] - 0.5*t2915*var2[3])*var2[4] + (t2927 + t2928 + 0.5*t2688*var2[2] + 0.5*t2915*var2[3])*var2[4] + var2[2]*(0.5*t2062*var2[0] + 0.5*t2455*var2[1] + 0.5*t2707*var2[2] + 0.5*t2696*var2[3] + 0.5*t2688*var2[4]) + var2[3]*(0.5*t1996*var2[0] + 0.5*t2429*var2[1] + 0.5*t2696*var2[2] + 0.5*t2919*var2[3] + 0.5*t2915*var2[4]);
  p_output1[5]=-6.7739031*(t2719 + t2720 + t3030 + t3032) - 1.9584684*(t2766 + t2769 + t2773 + t2777 + t3030 + t3032) + t2083*var2[0] + t2279*var2[0] + t2468*var2[1] + t2530*var2[1] + t2839*var2[2] + (t3037 + t3038)*var2[2] + (-0.5*t2198*var2[0] - 0.5*t2500*var2[1])*var2[2] + var2[0]*(t2750 + t2751 + t2752 + 0.5*t2148*var2[2]) + var2[1]*(t2736 + t2737 + t2738 + 0.5*t2487*var2[2]) - 0.5*t2726*var2[2]*var2[5] + (t3037 + t3038 - 0.5*t2726*var2[2])*var2[5] + (t2732 + t2733 + 0.5*t2726*var2[2])*var2[5] + (-0.5*t2258*var2[0] - 0.5*t2524*var2[1] - 0.5*t2816*var2[2])*var2[5] + (0.5*t2258*var2[0] + 0.5*t2524*var2[1] + 0.5*t2816*var2[2])*var2[5] + var2[0]*(t3099 + t3101 + t3102 + 0.5*t2324*var2[2] + 0.5*t2258*var2[5]) + var2[1]*(t3092 + t3094 + t3095 + 0.5*t2547*var2[2] + 0.5*t2524*var2[5]) + var2[2]*(0.5*t2148*var2[0] + 0.5*t2487*var2[1] + 0.5*t2730*var2[2] + 0.5*t2726*var2[5]) + (t3077 + t3078 + 0.5*t2812*var2[2])*var2[6] - 0.5*t3069*var2[5]*var2[6] - 0.5*t3065*Power(var2[6],2) + var2[2]*(0.5*t2324*var2[0] + 0.5*t2547*var2[1] + 0.5*t2822*var2[2] + 0.5*t2816*var2[5] + 0.5*t2812*var2[6]) + var2[6]*(-0.5*t2277*var2[0] - 0.5*t2528*var2[1] - 0.5*t2837*var2[2] - 0.5*t3069*var2[5] - 0.5*t3065*var2[6]);
  p_output1[6]=-1.9584684*(t2078*(-0.2375*t2157 + t2176) + t2074*(0.2375*t2155 + t2764) - 0.025226*(-1.*t2078*t2155 + t2771) - 0.314506*(-1.*t2078*t2157 + t2774)) + t2253*var2[0] + t2519*var2[1] + t2831*var2[2] + (-0.5*t2174*var2[0] - 0.5*t2496*var2[1])*var2[2] + (t3143 + t3144 - 0.5*t2812*var2[2])*var2[5] + var2[0]*(t3099 + t3101 + t3102 + 0.5*t2343*var2[2] + 0.5*t2277*var2[5]) + var2[1]*(t3092 + t3094 + t3095 + 0.5*t2554*var2[2] + 0.5*t2528*var2[5]) - 0.5*t3065*var2[5]*var2[6] + (t3143 + t3144 - 0.5*t2829*var2[2] - 0.5*t3065*var2[5])*var2[6] + (t3077 + t3078 + 0.5*t2829*var2[2] + 0.5*t3065*var2[5])*var2[6] + var2[2]*(0.5*t2343*var2[0] + 0.5*t2554*var2[1] + 0.5*t2848*var2[2] + 0.5*t2837*var2[5] + 0.5*t2829*var2[6]) + var2[5]*(0.5*t2277*var2[0] + 0.5*t2528*var2[1] + 0.5*t2837*var2[2] + 0.5*t3069*var2[5] + 0.5*t3065*var2[6]);
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 7, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "CGvec_five_link_walker.hh"

namespace SymFunction
{

void CGvec_five_link_walker_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
